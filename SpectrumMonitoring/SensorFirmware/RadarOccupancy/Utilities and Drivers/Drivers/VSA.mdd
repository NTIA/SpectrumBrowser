<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>2.42</FileVersion>
   <DriverName>C:\RSMS5G\Drivers\VSA.mdd</DriverName>
   <DriverType>MATLAB interface object</DriverType>
   <InstrumentType>Vector Analyzer</InstrumentType>
   <InstrumentManufacturer>Agilent</InstrumentManufacturer>
   <InstrumentModel>Model</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify>*IDN?</Identify>
   <Reset>*RST</Reset>
   <Selftest>*TST?</Selftest>
   <Error>System:Error?</Error>
   <CreateInitCode>
      <Code>function init(obj)
% This function is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
interface=get(obj,'interface');
set(interface,'InputBufferSize',1e6);
set(interface,'Timeout',10);
set(interface,'ByteOrder','bigEndian');
fclose(interface);</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>InstrumentCommand</Type>
   </ConnectInitCode>
   <CleanupCode>
      <Type>InstrumentCommand</Type>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>iGenAvgCount</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>AVER:COUN</ConfigureCommand>
                     <QueryCommand>AVER:COUN?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="99999.0" Min="1.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the number of measurements to use in an average. Valid inputs are integers from 1 to 99,999.</Description>
            </Property>
            <Property>
               <Name>iGenAvgFast</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>AVER:FAST</ConfigureCommand>
                     <QueryCommand>AVER:FAST?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="On" Value="1"/>
                     <Enum Name="Off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>On</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set whether fast averaging is enabled. A string value of  'On' enables fast averaging and 'Off'' disables it.</Description>
            </Property>
            <Property>
               <Name>iGenAvgFastUpdateRate</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>AVER:URAT</ConfigureCommand>
                     <QueryCommand>AVER:URAT?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the number of averages to complete before updating the display. The speed of fast averaging is improved by updating the display less frequently.</Description>
            </Property>
            <Property>
               <Name>iGenAvgRepeat</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>AVER:REP</ConfigureCommand>
                     <QueryCommand>AVER:REP?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="On" Value="1"/>
                     <Enum Name="Off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>On</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set whether the averaging repeats after completion. Use 'On' for turning on repeated averaging and 'Off' for turning off repeated averaging.</Description>
            </Property>
            <Property>
               <Name>iGenAvgStyle</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>AVER:STYL</ConfigureCommand>
                     <QueryCommand>AVER:STYL?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Off" Value="&#34;Off&#34;"/>
                     <Enum Name="Rms" Value="&#34;Rms&#34;"/>
                     <Enum Name="RmsExp" Value="&#34;RmsExponential&#34;"/>
                     <Enum Name="Time" Value="&#34;Time&#34;"/>
                     <Enum Name="TimeExp" Value="&#34;TimeExponential&#34;"/>
                     <Enum Name="ContPeakHold" Value="&#34;ContinuousPeakHold&#34;"/>
                     <Enum Name="PeakHold" Value="&#34;PeakHold&#34;"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the type of averaging used. Valid values are "Off", "Rms", "RmsExp", "Time", "TimeExp", "ContPeakHold", "PeakHold".</Description>
            </Property>
            <Property>
               <Name>iGenCal</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>CAL:ALL</ConfigureCommand>
                     <QueryCommand>CAL:ALL?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>iGenCalNeeded</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
IFace = get(obj, 'interface');
MeasStatusBytes = -345;

tStart = tic;
ElapsedTime = toc(tStart);
while MeasStatusBytes &lt; 0 &amp;&amp; ElapsedTime &lt; 5
  MeasStatusBytes = str2double(query(IFace, 'MEAS:STAT?'));
  ElapsedTime = toc(tStart);
end
if ~isnan(MeasStatusBytes)
  if MeasStatusBytes &gt;= 0
    CalNeededBit = bitand(MeasStatusBytes, 4096);
    propertyValue = CalNeededBit/4096;
  else
    propertyValue = 0;
  end
else
  propertyValue = 0;
end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns whether or not a calibration is required.</Description>
            </Property>
            <Property>
               <Name>iGenCenterFreq</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>:FREQ:CENT</ConfigureCommand>
                     <QueryCommand>:FREQ:CENT?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="6.0E9" Min="3.0E7"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>100e06</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set and get the VSA center frequency.</Description>
            </Property>
            <Property>
               <Name>iGenContSweep</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>INIT:CONT</ConfigureCommand>
                     <QueryCommand>INIT:CONT?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="ON" Value="1"/>
                     <Enum Name="OFF" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>ON</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Gets or sets whether the measurement is continuous or single sweep.</Description>
            </Property>
            <Property>
               <Name>iGenDispEnable</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>DISP:ENAB</ConfigureCommand>
                     <QueryCommand>DISP:ENAB?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set if the main VSA application window is visible</Description>
            </Property>
            <Property>
               <Name>iGenDispTitle</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>DISP:ANN:TITL</ConfigureCommand>
                     <QueryCommand>DISP:ANN:TITL?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the text in the title bar in the VSA main display window. Note that the text that is sent must start with and end with double quotes! Similarily, the text returned starts with and ends with double quotes! For example, when using the General Instrument UI to set the display title to MyTitle, in the Set Property Value to: text box put in '"MyTitle"'. Note that the text is sent with single quotes on the outside of double quotes that surround the actual text to be sent.</Description>
            </Property>
            <Property>
               <Name>iGenFileSaved</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>:INP:REC:FILE:SAV?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>iGenFormatTraceData</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FORM:TRAC:DATA</ConfigureCommand>
                     <QueryCommand>FORM:TRAC:DATA?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="ASCII" Value="ASCii"/>
                     <Enum Name="INT32" Value="INT32"/>
                     <Enum Name="REAL64" Value="REAL64"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>ASCII</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the format for data returned from TRACe:DATA? queries. Valid values are ASCii, INT32, or REAL64.</Description>
            </Property>
            <Property>
               <Name>iGenFreqSpan</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FREQ:SPAN</ConfigureCommand>
                     <QueryCommand>FREQ:SPAN?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="3.7109375E7" Min="0.276486389"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.276486389</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Gets or sets the frequency span in Hertz.</Description>
            </Property>
            <Property>
               <Name>iGenFreqStart</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FREQ:STAR</ConfigureCommand>
                     <QueryCommand>FREQ:STAR?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the measurement start frequency in Hertz.</Description>
            </Property>
            <Property>
               <Name>iGenInputCoupling</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>INP:ANAL:COUP</ConfigureCommand>
                     <QueryCommand>INP:ANAL:COUP?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <DependentProperty>iGenSelZoomBaseband</DependentProperty>
                  <DependentPropertyValue>bb</DependentPropertyValue>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AC" Value="AC"/>
                     <Enum Name="DC" Value="DC"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <DependentProperty>iGenSelZoomBaseband</DependentProperty>
                  <DependentPropertyValue>rf</DependentPropertyValue>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AC" Value="AC"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>AC</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Gets or sets the input coupling. For Zoom mode this can only be AC, for Baseband this can be AC or DC.</Description>
            </Property>
            <Property>
               <Name>iGenInputFrom</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>INP:DATA</ConfigureCommand>
                     <QueryCommand>INP:DATA?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Hardware" Value="HW"/>
                     <Enum Name="Recording" Value="REC"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Hardware</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Gets or sets the input source. The input source is either from hardware or from a recording.</Description>
            </Property>
            <Property>
               <Name>iGenInputRange</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>INP:ANAL:RANG:LIST</ConfigureCommand>
                     <QueryCommand>INP:ANAL:RANG:LIST?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Gets or sets the analog input range (in Vpk).</Description>
            </Property>
            <Property>
               <Name>iGenRbw</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>RBW</ConfigureCommand>
                     <QueryCommand>RBW?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the resolution BW in Hertz</Description>
            </Property>
            <Property>
               <Name>iGenRbwArbitrary</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>RBW:ARB</ConfigureCommand>
                     <QueryCommand>RBW:ARB?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Arbitrary" Value="1"/>
                     <Enum Name="Fixed" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Arbitrary</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set whether the resolution BW is allowed to be arbitrary or constrained to a 1 - 3 - 10 progression. Select enumerated string values Arbitrary ('1') or Fixed ('0')</Description>
            </Property>
            <Property>
               <Name>iGenRbwCoupling</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>RBW:COUP</ConfigureCommand>
                     <QueryCommand>RBW:COUP?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Auto" Value="&#34;Auto&#34;"/>
                     <Enum Name="Offset" Value="&#34;Offset&#34;"/>
                     <Enum Name="Fixed" Value="&#34;Fixed&#34;"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Auto</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set how values of RBW are coupled to the frequency Span. Values can be Auto, Offset, or Fixed.</Description>
            </Property>
            <Property>
               <Name>iGenRbwPoints</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>RBW:POIN</ConfigureCommand>
                     <QueryCommand>RBW:POIN?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="409601.0" Min="51.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>51.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the number of unaliased frequency points to display</Description>
            </Property>
            <Property>
               <Name>iGenRbwPointsAuto</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>RBW:POIN:AUTO</ConfigureCommand>
                     <QueryCommand>RBW:POIN:AUTO?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="1" Value="1"/>
                     <Enum Name="0" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Gets or sets the auto frequency points mode. If Auto mode is selected, the VSA automatically selects the number of frequency points. If Auto mode is NOT selected, the number of frequency points is set manually by the user.

Allowed inputs:
1 - Auto mode is selected
0 - Auto mode is turned off</Description>
            </Property>
            <Property>
               <Name>iGenRecLength</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>INP:REC:LENG</ConfigureCommand>
                     <QueryCommand>INP:REC:LENG?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the length of the next recording</Description>
            </Property>
            <Property>
               <Name>iGenRecLengthExtraSettling</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>INP:REC:LENG:EXTR</ConfigureCommand>
                     <QueryCommand>INP:REC:LENG:EXTR?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set whether the recording length will include extra data to allow for the filters to settle during playback. Choose True to include this extra data if you want the playback data length to be exactly what was specified. Send the string '1' for True or '0' for False.</Description>
            </Property>
            <Property>
               <Name>iGenRecLengthMax</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>INP:REC:LENG:MAX</ConfigureCommand>
                     <QueryCommand>INP:REC:LENG:MAX?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set whether the recording length will be the maximum supported by the input channel. Set the string to '1' for True or '0' for False.</Description>
            </Property>
            <Property>
               <Name>iGenRecLengthTime</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>INP:REC:LENG:TIME?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Read only property. Get the length of the next recording in time.</Description>
            </Property>
            <Property>
               <Name>iGenRecLengthUnit</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>INP:REC:LENG:UNIT</ConfigureCommand>
                     <QueryCommand>INP:REC:LENG:UNIT?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Record" Value="&#34;Record&#34;"/>
                     <Enum Name="Second" Value="&#34;Second&#34;"/>
                     <Enum Name="Point" Value="&#34;Point&#34;"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Record</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the units for the length of the next recording</Description>
            </Property>
            <Property>
               <Name>iGenSelZoomBaseband</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>INP:CHAN:CONF</ConfigureCommand>
                     <QueryCommand>INP:CHAN:CONF?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Baseband" Value="BB"/>
                     <Enum Name="Zoom" Value="RF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Baseband</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Gets or sets wether the VSA is in Baseband or Zoom mode</Description>
            </Property>
            <Property>
               <Name>iGenSystemErr</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>SYST:ERR?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read only property. Get an error message from the VSA if one exists.</Description>
            </Property>
            <Property>
               <Name>iGenTimeLength</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>TIME:LENG</ConfigureCommand>
                     <QueryCommand>TIME:LENG?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the main time length in seconds.</Description>
            </Property>
            <Property>
               <Name>iGenTimeOverlap</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>TIME:OVER</ConfigureCommand>
                     <QueryCommand>TIME:OVER?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the percentage of overlap processing to be used when averaging is off.</Description>
            </Property>
            <Property>
               <Name>iGenTimeOverlapAvg</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>TIME:OVER:AVER</ConfigureCommand>
                     <QueryCommand>TIME:OVER:AVER?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the percentage of overlap processing to use when averaging is ON.</Description>
            </Property>
            <Property>
               <Name>iGenTimePoints</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>TIME:POIN</ConfigureCommand>
                     <QueryCommand>TIME:POIN?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the number of main time points to acquire for each measurement scan. The number of main time points is related to the number of frequency points by Time Points = (Freq. Points -1) * 1.28.</Description>
            </Property>
            <Property>
               <Name>iGenTrigDelay</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>INP:TRIG:DEL</ConfigureCommand>
                     <QueryCommand>INP:TRIG:DEL?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Gets or sets the trigger delay in seconds. Note this can be a negative number for a pre-trigger capture or a positive number for a post-trigger capture.</Description>
            </Property>
            <Property>
               <Name>iGenTrigHoldoff</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>INP:TRIG:DEL</ConfigureCommand>
                     <QueryCommand>INP:TRIG:DEL?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the trigger holdoff in seconds.</Description>
            </Property>
            <Property>
               <Name>iGenTrigHoldoffStyle</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>INP:TRIG:HOLD:STYL</ConfigureCommand>
                     <QueryCommand>INP:TRIG:HOLD:STYL?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="BelowLevel" Value="&#34;BelowLevel&#34;"/>
                     <Enum Name="Conventional" Value="&#34;Conventional&#34;"/>
                     <Enum Name="AboveLevel" Value="&#34;AboveLevel&#34;"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>BelowLevel</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the trigger holdoff style. Valid entry for the VSA  is the string enumeration BelowLevel. This is the only holdoff style that is relevant for the Level and MagnitudeLevel trigger styles. All other VSA trigger styles do not use the trigger holdoff.</Description>
            </Property>
            <Property>
               <Name>iGenTrigLevel</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>INP:TRIG:LEV</ConfigureCommand>
                     <QueryCommand>INP:TRIG:LEV?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the trigger level in volts. This level is only used when the Trigger Style is set to Level. The trigger style Level is only an option when the VSA is in baseband mode.</Description>
            </Property>
            <Property>
               <Name>iGenTrigLevelExt</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>INP:TRIG:LEV:EXT</ConfigureCommand>
                     <QueryCommand>INP:TRIG:LEV:EXT?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the external trigger level in volts.</Description>
            </Property>
            <Property>
               <Name>iGenTrigLevelMag</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>INP:TRIG:LEV:MAGN</ConfigureCommand>
                     <QueryCommand>INP:TRIG:LEV:MAGN?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the trigger level in volts as the magnitude at the IF.</Description>
            </Property>
            <Property>
               <Name>iGenTrigSlope</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>INP:TRIG:SLOP</ConfigureCommand>
                     <QueryCommand>INP:TRIG:SLOP?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Pos" Value="&#34;Positive&#34;"/>
                     <Enum Name="Neg" Value="&#34;Negative&#34;"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Pos</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the trigger slope. Values are either a string Pos or Neg.</Description>
            </Property>
            <Property>
               <Name>iGenTrigStyle</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>INP:TRIG:STYL</ConfigureCommand>
                     <QueryCommand>INP:TRIG:STYL?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Auto" Value="&#34;Auto&#34;"/>
                     <Enum Name="Level" Value="&#34;Level&#34;"/>
                     <Enum Name="MagLevel" Value="&#34;MagnitiudeLevel&#34;"/>
                     <Enum Name="External" Value="&#34;External&#34;"/>
                     <Enum Name="ExternalTTL" Value="&#34;ExternalTtl&#34;"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Auto</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the type of triggering. Values are the following string enumerations: 'Auto', 'Level','MagnitudeLevel', 'External', or 'ExternalTTL'. Note: the trigger style Level is only available when the VSA is in the baseband mode.</Description>
            </Property>
            <Property>
               <Name>iGenWindowType</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>RBW:WIND</ConfigureCommand>
                     <QueryCommand>RBW:WIND?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Uniform" Value="&#34;Uniform&#34;"/>
                     <Enum Name="Hanning" Value="&#34;Hanning&#34;"/>
                     <Enum Name="Gauss" Value="&#34;Gauss&#34;"/>
                     <Enum Name="FlatTop" Value="&#34;FlatTop&#34;"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Uniform</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the type of window applied to the main time data</Description>
            </Property>
            <Property>
               <Name>MessageEnable</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>SYST:VSA:MESS:ENAB</ConfigureCommand>
                     <QueryCommand>SYST:VSA:MESS:ENAB?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="0" Value="0"/>
                     <Enum Name="1" Value="1"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>iGenAutoRange</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="INP:ANAL:RANG:AUTO" Output="false"/>
                  </Commands>
               </Code>
               <Description>Performs an autorange function on the input signal to attempt to find the best input range to set the VSA to. This operation includes a Measurement Restart command.</Description>
            </Method>
            <Method>
               <Name>iGenCal</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="CAL:ALL?" Format="numeric" Output="true" ReadOutputAs="ASCII"/>
                  </Commands>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>iGenMarkerDown</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenMarkerDown(obj, TraceIndex, MarkerNumber)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%MarkerNumber = String representing the specific marker number.
%For example, '1'

%Get the interface object
interface=get(obj,'interface');

%Move the specified marker on the specified trace to the next lower peak. 
fprintf(interface,['TRAC', TraceIndex, ':MARK', MarkerNumber, ':DOWN']);</MCode>
               </Code>
               <Description>Set the specified marker on the specified trace to the next lower peak on 
the trace.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
MarkerNumber = String representing the specific marker number.
For example, '1'</Description>
            </Method>
            <Method>
               <Name>iGenMarkerEnableGet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function MarkerEnable=iGenMarkerEnableGet(obj, TraceIndex, MarkerNumber)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%MarkerNumber = String representing the specific marker number.
%For example, '1'
%Output Argument
%MarkerEnable = Whether the specified marker on the specified trace is
%enabled or not. 

%Get the interface object
interface=get(obj,'interface');

%Get whether the specified marker on the specified trace is
%enabled or not. 
MarkerEnable=query(interface,['TRAC', TraceIndex, ':MARK', MarkerNumber, ':ENAB?']);</MCode>
               </Code>
               <Description>Get whether the specified marker on the specified trace is
enabled or not. 

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
MarkerNumber = String representing the specific marker number. For example, '1'
Output Argument
MarkerEnable = Whether the specified marker on the specified trace is
enabled or not.</Description>
            </Method>
            <Method>
               <Name>iGenMarkerEnableSet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenMarkerEnableSet(obj, TraceIndex, MarkerNumber, MarkerEnable)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%MarkerNumber = String representing the specific marker number.
%For example, '1'
%
%MarkerEnable = Whether the specified marker on the specified trace is
%enabled or not. The string '1' will represent a marker to be enabled and a
%'0' will represent a marker to be disabled.

%Get the interface object
interface=get(obj,'interface');

%Set whether the specified marker on the specified trace is
%enabled or not. 
fprintf(interface,['TRAC', TraceIndex, ':MARK', MarkerNumber, ':ENAB ', MarkerEnable]);</MCode>
               </Code>
               <Description>Set whether the specified marker on the specified trace is
enabled or not. 

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
MarkerNumber = String representing the specific marker number.
For example, '1'

MarkerEnable = Whether the specified marker on the specified trace is
enabled or not. The string '1' will represent a marker to be enabled and a
'0' will represent a marker to be disabled.</Description>
            </Method>
            <Method>
               <Name>iGenMarkerLeft</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenMarkerLeft(obj, TraceIndex, MarkerNumber)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%MarkerNumber = String representing the specific marker number.
%For example, '1'

%Get the interface object
interface=get(obj,'interface');

%Move the specified marker on the specified trace to the next valid peak to
%the left on the trace.
fprintf(interface,['TRAC', TraceIndex, ':MARK', MarkerNumber, ':LEFT']);</MCode>
               </Code>
               <Description>Set the specified marker on the specified trace to the next valid peak to the left on 
the trace.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
MarkerNumber = String representing the specific marker number.
For example, '1'</Description>
            </Method>
            <Method>
               <Name>iGenMarkerMax</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenMarkerMax(obj, TraceIndex, MarkerNumber)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%MarkerNumber = String representing the specific marker number.
%For example, '1'

%Get the interface object
interface=get(obj,'interface');

%Move the specified marker on the specified trace to the maximum value on
%the trace. 
fprintf(interface,['TRAC', TraceIndex, ':MARK', MarkerNumber, ':MAX']);</MCode>
               </Code>
               <Description>Set the specified marker on the specified trace to the maximum point on
the trace.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
MarkerNumber = String representing the specific marker number.
For example, '1'</Description>
            </Method>
            <Method>
               <Name>iGenMarkerMin</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenMarkerMin(obj, TraceIndex, MarkerNumber)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%MarkerNumber = String representing the specific marker number.
%For example, '1'

%Get the interface object
interface=get(obj,'interface');

%Move the specified marker on the specified trace to the minimum value on
%the trace. 
fprintf(interface,['TRAC', TraceIndex, ':MARK', MarkerNumber, ':MIN']);</MCode>
               </Code>
               <Description>Set the specified marker on the specified trace to the minimum point on
the trace.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
MarkerNumber = String representing the specific marker number.
For example, '1'</Description>
            </Method>
            <Method>
               <Name>iGenMarkerRight</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenMarkerRight(obj, TraceIndex, MarkerNumber)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%MarkerNumber = String representing the specific marker number.
%For example, '1'

%Get the interface object
interface=get(obj,'interface');

%Move the specified marker on the specified trace to the next valid peak to
%the right on the trace.
fprintf(interface,['TRAC', TraceIndex, ':MARK', MarkerNumber, ':RIGH']);</MCode>
               </Code>
               <Description>Set the specified marker on the specified trace to the next valid peak to the right on 
the trace.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
MarkerNumber = String representing the specific marker number.
For example, '1'</Description>
            </Method>
            <Method>
               <Name>iGenMarkerUp</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenMarkerUp(obj, TraceIndex, MarkerNumber)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%MarkerNumber = String representing the specific marker number.
%For example, '1'

%Get the interface object
interface=get(obj,'interface');

%Move the specified marker on the specified trace to the next higher peak. 
fprintf(interface,['TRAC', TraceIndex, ':MARK', MarkerNumber, ':UP']);</MCode>
               </Code>
               <Description>Set the specified marker on the specified trace to the next higher peak on 
the trace.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
MarkerNumber = String representing the specific marker number.
For example, '1'</Description>
            </Method>
            <Method>
               <Name>iGenMarkerXGet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function MarkerX=iGenMarkerXGet(obj, TraceIndex, MarkerNumber)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%MarkerNumber = String representing the specific marker number.
%For example, '1'
%Output Argument
%MarkerX = X value of the marker 

%Get the interface object
interface=get(obj,'interface');

%Get the X-axis data value of the specified marker on the specified trace.
MarkerX=query(interface,['TRAC', TraceIndex, ':MARK', MarkerNumber, ':X?']);</MCode>
               </Code>
               <Description>Get the X-axis data value of the specified marker on the specified trace.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
MarkerNumber = String representing the specific marker number.
For example, '1'
Output Argument
MarkerX = X value of the marker </Description>
            </Method>
            <Method>
               <Name>iGenMarkerXSet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenMarkerXSet(obj, TraceIndex, MarkerNumber, MarkerX)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%MarkerNumber = String representing the specific marker number.
%For example, '1'
%Output Argument
%MarkerX = X value of the marker 

%Get the interface object
interface=get(obj,'interface');

%Set the X-axis data value of the specified marker on the specified trace.
fprintf(interface,['TRAC', TraceIndex, ':MARK', MarkerNumber, ':X ', MarkerX]);</MCode>
               </Code>
               <Description>Set the X-axis data value of the specified marker on the specified trace.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
MarkerNumber = String representing the specific marker number.
For example, '1'

MarkerX = X value of the marker </Description>
            </Method>
            <Method>
               <Name>iGenMarkerXunits</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function MarkerXunits=iGenMarkerXunits(obj, TraceIndex, MarkerNumber)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%MarkerNumber = String representing the specific marker number.
%For example, '1'
%Output Argument
%MarkerXunits = X axis units of the specified marker on the specified
%trace.

%Get the interface object
interface=get(obj,'interface');

%Get the X-axis units of the specified marker on the specified trace.
MarkerXunits=query(interface,['TRAC', TraceIndex, ':MARK', MarkerNumber, ':X:UNIT?']);</MCode>
               </Code>
               <Description>Get the X-axis units of the specified marker on the specified trace.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
MarkerNumber = String representing the specific marker number.
For example, '1'
Output Argument
MarkerXunits = X axis units of the specified marker on the specified
trace.</Description>
            </Method>
            <Method>
               <Name>iGenMarkerYGet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function MarkerY=iGenMarkerYGet(obj, TraceIndex, MarkerNumber)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%MarkerNumber = String representing the specific marker number.
%For example, '1'
%Output Argument
%MarkerY = Y value of the marker 

%Get the interface object
interface=get(obj,'interface');

%Get the Y-axis data value of the specified marker on the specified trace.
MarkerY=query(interface,['TRAC', TraceIndex, ':MARK', MarkerNumber, ':Y?']);</MCode>
               </Code>
               <Description>Get the Y-axis data value of the specified marker on the specified trace.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
MarkerNumber = String representing the specific marker number.
For example, '1'
Output Argument
MarkerY = Y value of the marker </Description>
            </Method>
            <Method>
               <Name>iGenMarkerYSet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenMarkerYSet(obj, TraceIndex, MarkerNumber, MarkerY)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%MarkerNumber = String representing the specific marker number.
%For example, '1'
%Output Argument
%MarkerY = Y value of the marker 

%Get the interface object
interface=get(obj,'interface');

%Set the Y-axis data value of the specified marker on the specified trace.
fprintf(interface,['TRAC', TraceIndex, ':MARK', MarkerNumber, ':Y ', MarkerYX]);</MCode>
               </Code>
               <Description>Set the Y-axis data value of the specified marker on the specified trace.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
MarkerNumber = String representing the specific marker number.
For example, '1'

MarkerY = Y value of the marker </Description>
            </Method>
            <Method>
               <Name>iGenMarkerYunits</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function MarkerYunits=iGenMarkerYunits(obj, TraceIndex, MarkerNumber)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%MarkerNumber = String representing the specific marker number.
%For example, '1'
%Output Argument
%MarkerYunits = Y axis units of the specified marker on the specified
%trace.

%Get the interface object
interface=get(obj,'interface');

%Get the X-axis units of the specified marker on the specified trace.
MarkerYunits=query(interface,['TRAC', TraceIndex, ':MARK', MarkerNumber, ':Y:UNIT?']);</MCode>
               </Code>
               <Description>Get the Y-axis units of the specified marker on the specified trace.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
MarkerNumber = String representing the specific marker number.
For example, '1'
Output Argument
MarkerYunits = Y axis units of the specified marker on the specified
trace.</Description>
            </Method>
            <Method>
               <Name>iGenMeasStatus</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="MEAS:STAT?" Format="numeric" Output="true" ReadOutputAs="ASCII"/>
                  </Commands>
               </Code>
               <Description>Returns the value of the bitflags in the Measurement.Status Property in the .NET Interface</Description>
            </Method>
            <Method>
               <Name>iGenPreset</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="*RST" Output="false"/>
                  </Commands>
               </Code>
               <Description>This function presets the VSA.</Description>
            </Method>
            <Method>
               <Name>iGenRecLengthMaxTime</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="INP:REC:LENG:MAX:TIME?" Format="numeric" Output="true" ReadOutputAs="ASCII"/>
                  </Commands>
               </Code>
               <Description>Get the maximum recording time supported by the current input channel</Description>
            </Method>
            <Method>
               <Name>iGenRecordAndSave</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ItWorked, OV1] = iGenRecordAndSave(obj, VSAPCPath, FileName, FileType, Header, MeasFreq, PlayTime, SaveOV1)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
IFace = get(obj, 'interface');
ItWorked = true;
set(IFace, 'timeout', 1000);
% start recording
fprintf(IFace, 'INIT:REC:IMM');


Done = false;
tStart = tic;
tTot = toc(tStart);
% enter loop and wait for recording to finish
while ~Done &amp;&amp; tTot &lt; 1000
  MeasStatusBytes = str2double(query(IFace, 'MEAS:STAT?'));
  if ~isnan(MeasStatusBytes)
    RecordingBit = bitand(MeasStatusBytes, 128);
  else
    RecordingBit = 128;
  end
  if RecordingBit &gt; 0
    tTot = toc(tStart);
  else
    Done = true;
  end
end
if tTot &gt;= 1000
  ItWorked = false;
end

%Check for Overload
Overload = invoke(obj, 'iGenRecOverload');
if strcmpi(Overload, 'OVERLOADED_OCCUR')
  OV1 = true;
else
  OV1 = false;
end

if SaveOV1 || ~OV1
  PathFileName = [VSAPCPath, FileName];
  % Save the data.
  if ItWorked
    fprintf(IFace,['MMEM:STOR:REC ', '"', PathFileName, '","', FileType, '",', ...
      Header, ',', MeasFreq, ',', PlayTime]);
    
    % wait until data is saved
    SavedFileName = query(IFace, ':INP:REC:FILE:SAV?');
    Done = false;
    tStart = tic;
    tTot = toc(tStart);
    while ~Done &amp;&amp; tTot &lt; 1000
      if isempty(strfind(SavedFileName, FileName))
        tTot = toc(tStart);
      else
        Done = true;
      end
    end
    if tTot &gt;= 1000
      ItWorked = false;
    end
  end
end
set(IFace, 'timeout', 10);</MCode>
               </Code>
               <Description>This function starts a recording and then saves the file to the specified path and filename.

Input Arguments
Required inputs are
FileName = Enter as text the filename. For example, 'test.mat' for mat file
VSAPCPath = text as path name on the VSA computer ex. 'c:\'
FileType = (must be either 'CSV', 'MAT', 'MAT4', 'MAT7', 'N5110A', 'N5106A', 'SDF', 'SDFX', 'TEXT')
Header = (String '1' to save the header data and '0' to NOT save the header data)
MeasFreq = Use string '1' to save recording with the current center freq
   and span settings. Use string '0' to save recording with the center freq.
   and span settings at the time the recording was made.
PlayTime = Use string '1' to save only the data between the specified
   playback start and stop times. Use string '0' to save the entire length of
   the recording.

Input Argument example
'c:\temp\test', 'CSV', '1', '0', '0'</Description>
            </Method>
            <Method>
               <Name>iGenRecordingWait</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="INIT:REC:WAIT?" Output="false"/>
                  </Commands>
               </Code>
               <Description>Wait 10 seconds for the recording to complete.</Description>
            </Method>
            <Method>
               <Name>iGenRecOverload</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Overload=iGenRecOverload()
% This function determines whether an overload has occurred in the newest
% temporary recording that was taken by the VSA.

%**************************************************************************
%Important Requirements and First Time Use Setup Only
%
%Note: Follow these instructions only if the dll installation on the Remote
%PC and the shared folder setup on the Local PC have not been done.
%
%   Remote PC
%     (this PC. i.e., the PC that runs Matlab and is used to control the local
%     PC running the 89600B VSA software)
%     Windows 7 Operating System 64-bit
%     64-bit Matlab (R2011b)
%     Install Microsoft Visual C++ 2010 SP1 Redistributable Package (x64)
%     http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=13523
%     Copy the Sdf5x.dll from the RSMS5G CVS repository to the 
%     C:\RSMS5G\MiscFunctions directory on the remote PC (i.e., this PC)

%     Register the dll

%     Run the command prompt as Administrator (Start, Programs, Accessories, right click on Command Prompt and select Run as Administrator)

%     Change directory to the location where you placed the dll (cd C:\RSMS5G\MiscFunctions)

%     Register the dll by running regsvr32 (C:\RSMS5G\MiscFunctions&gt;regsvr32 Sdf5x.dll)

%   Local PC
%     (PC that runs the Agilent 89600B VSA software)
%     Setup the folder where the temporary recording .sdf file is stored
%     (C:\Documents and Settings\rsms5g\My Documents\Agilent\89600B VSA) as
%     a network shared folder. Use the Network Setup Wizard.
%
%   Remote PC
%     Select Start, right-click on Computer.
%     Select Map Network Drive. Use Drive X: and browse to find the VSA PC to
%     be used on the network. Select VSA PC name and the 89600B VSA folder.
%**************************************************************************
%Input Arguments
%     None
%Output Argument
%Overload = String representing whether an overload has occurred or not.
%     'OVERLOADED_OCCUR'
%     'NOT_OVERLOADED'


%Change the current directory to mapped drive X:. This maps to the 
%C:\Documents and Settings\rsms5g\My Documents\Agilent\89600B VSA directory
%on the Agilent 89600B VSA PC (Version 14.2).

CurrDir = cd;
cd X:;

%Get all of the VSA temporary recording files that are currently stored in
%the C:\Documents and Settings\rsms5g\My Documents\Agilent\89600B VSA
%directory on the Agilent 89600B VSA PC (Version 14.2). Note that this
%directory should be assigned to a mapped drive X: on this, the local
%computer that will control the VSA using Matlab.
VSATempRecFiles=dir('Recording.sdf*');

NumRecFiles=length(VSATempRecFiles);

%Initialize the index for the newest temporary recording file
NewestRec=1;

%Loop to find the newest temporary recording file

if NumRecFiles &gt; 1
  for ii=2:NumRecFiles
    %Test to see if the current recording file is newer than the newest
    %file previously identified. If it is, update the index for the newest
    %temporary recording file.
    if VSATempRecFiles(NewestRec).datenum &lt; VSATempRecFiles(ii).datenum
      NewestRec=ii;
    end
  end
end

NewestFilename=VSATempRecFiles(NewestRec).name;

hsdfFile=actxserver('AgtSdf.File');
hsdfFile.Open(['X:\', NewestFilename],0);
chanHdr=hsdfFile.SdfChanHdrs.Item(0);
Overload=chanHdr.Overloaded;
hsdfFile.Close
hsdfFile.delete
clear hsdfFile
cd(CurrDir);</MCode>
               </Code>
               <Description>This function determines whether an overload has occurred in the newest
temporary recording that was taken by the VSA.

**************************************************************************
Important Requirements and First Time Use Setup Only

Note: Follow these instructions only if the dll installation on the Remote
PC and the shared folder setup on the Local PC have not been done.

  Remote PC
    (this PC. i.e., the PC that runs Matlab and is used to control the local
    PC running the 89600B VSA software)
    Windows 7 Operating System 64-bit
    64-bit Matlab (R2011b)
    Install Microsoft Visual C++ 2010 SP1 Redistributable Package (x64)
    http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=13523
    Copy the Sdf5x.dll from the RSMS5G CVS repository to the 
    C:\RSMS5G\MiscFunctions directory on the remote PC (i.e., this PC)

    Register the dll

    Run the command prompt as Administrator (Start, Programs, Accessories, right click on Command Prompt and select Run as Administrator)

    Change directory to the location where you placed the dll (cd C:\RSMS5G\MiscFunctions)

    Register the dll by running regsvr32 (C:\RSMS5G\MiscFunctions&gt;regsvr32 Sdf5x.dll)

  Local PC
    (PC that runs the Agilent 89600B VSA software)
    Setup the folder where the temporary recording .sdf file is stored
    (C:\Documents and Settings\rsms5g\My Documents\Agilent\89600B VSA) as
    a network shared folder. Use the Network Setup Wizard.

  Remote PC
    Select Start, right-click on Computer.
    Select Map Network Drive. Use Drive X: and browse to find the VSA PC to
    be used on the network. Select VSA PC name and the 89600B VSA folder.
**************************************************************************
Input Arguments
    None
Output Argument
Overload = String representing whether an overload has occurred or not.
    'OVERLOADED_OCCUR'
    'NOT_OVERLOADED'</Description>
            </Method>
            <Method>
               <Name>iGenRecSaveFileName</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="INP:REC:FILE:SAV?" Format="text" Output="true" ReadOutputAs="ASCII"/>
                  </Commands>
               </Code>
               <Description>Get the filename that the current recording was last saved to or recalled from</Description>
            </Method>
            <Method>
               <Name>iGenRecTempFileName</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="INP:REC:FILE:CURR?" Format="text" Output="true" ReadOutputAs="ASCII"/>
                  </Commands>
               </Code>
               <Description>Gets the current temporary filename where the recording is saved</Description>
            </Method>
            <Method>
               <Name>iGenRestartMeas</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="INIT:REST" Output="false"/>
                  </Commands>
               </Code>
               <Description>Causes the measurement to restart. The average count is reset to 0.</Description>
            </Method>
            <Method>
               <Name>iGenResumeMeas</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="INIT:RES" Output="false"/>
                  </Commands>
               </Code>
               <Description>Causes the measurement to transition to the Running state.</Description>
            </Method>
            <Method>
               <Name>iGenSampleRate</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="FREQ:INP:SRAT?" Format="numeric" Output="true" ReadOutputAs="ASCII"/>
                  </Commands>
               </Code>
               <Description>Get the sample rate from the VSA</Description>
            </Method>
            <Method>
               <Name>iGenSaveRecording</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenSaveRecording(obj, PathFileName, FileType, Header, MeasFreq, PlayTime)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

%Input Arguments
%Required inputs are
%PathFileName = Enter as text path and filename. For example, 'c:\temp\test'
%FileType = (must be either 'CSV', 'MAT', 'MAT4', 'MAT7', 'N5110A', 'N5106A', 'SDF', 'SDFX', 'TEXT')
%Header = (String '1' to save the header data and '0' to NOT save the header data)
%MeasFreq = Use string '1' to save recording with the current center freq
% and span settings. Use string '0' to save recording with the center freq.
% and span settings at the time the recording was made.
%PlayTime = Use string '1' to save only the data between the specified
% playback start and stop times. Use string '0' to save the entire length of
% the recording.
%Get the interface object
interface=get(obj,'interface');

%Save the VSA setup to the file and path specificed by PathFileName
%Note that double quotes around the text as required by the VSA
%are inserted by the command below and therefore are not required as
%user input.
fprintf(interface,['MMEM:STOR:REC ', '"', PathFileName, '","', FileType, '",', ...
  Header, ',', MeasFreq, ',', PlayTime]);</MCode>
               </Code>
               <Description>Allows a user to save a recording to a file.

Input Arguments
Required inputs are
PathFileName = Enter as text path and filename. For example, 'c:\temp\test'
FileType = (must be either 'CSV', 'MAT', 'MAT4', 'MAT7', 'N5110A', 'N5106A', 'SDF', 'SDFX', 'TEXT')
Header = (String '1' to save the header data and '0' to NOT save the header data)
MeasFreq = Use string '1' to save recording with the current center freq
   and span settings. Use string '0' to save recording with the center freq.
   and span settings at the time the recording was made.
PlayTime = Use string '1' to save only the data between the specified
   playback start and stop times. Use string '0' to save the entire length of
   the recording.

Input Argument example
'c:\temp\test', 'CSV', '1', '0', '0'</Description>
            </Method>
            <Method>
               <Name>iGenSaveRecordingInstrCom</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="MMEM:STOR:REC &lt;PathFileName&gt;,&lt;FileType&gt;,&lt;Header&gt;,&lt;MeasFreq&gt;,&lt;PlayTime&gt;" Output="false"/>
                     <Input>PathFileName</Input>
                     <Input>FileType</Input>
                     <Input>Header</Input>
                     <Input>MeasFreq</Input>
                     <Input>PlayTime</Input>
                  </Commands>
               </Code>
               <Description>Same as iGenSaveRecording but uses Instrument Commands Function Style instead of m-code. Allows a user to save a recording to a file.

Input Arguments
Required inputs are
PathFileName = Enter as text path and filename. For example, '"c:\temp\test"'
FileType = (must be either '"CSV"', '"MAT"', '"MAT4"', '"MAT7"', '"N5110A"', '"N5106A"', '"SDF"', '"SDFX"', '"TEXT"')
Header = (String '1' to save the header data and '0' to NOT save the header data)
MeasFreq = Use string '1' to save recording with the current center freq
   and span settings. Use string '0' to save recording with the center freq.
   and span settings at the time the recording was made.
PlayTime = Use string '1' to save only the data between the specified
   playback start and stop times. Use string '0' to save the entire length of
   the recording.

Input Argument example '"c:\temp\test"', '"CSV"', '1', '0', '0'

Note: PathFileName and FileType need inputs to be text surrounded by double quotes and then single quotes on the outside.</Description>
            </Method>
            <Method>
               <Name>iGenSaveSetup</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenSaveSetup(obj, PathFileName)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Argument
%PathFileName = a string that represents the path and filename
%to store the VSA setup. For example 'c:\temp\setup'

%Get the interface object
interface=get(obj,'interface');

%Save the VSA setup to the file and path specificed by PathFileName
%Note that double quotes around the text as required by the VSA
%are inserted by the command below and therefore are not required as
%user input.
fprintf(interface,['MMEM:STOR:SET ', '"',PathFileName, '"']);</MCode>
               </Code>
               <Description>Saves the current VSA setup to a user specified path and filename. Enter the path and filename as a single text argument, for example 'c:\temp\setup'. Note that double quotes around the text are not needed since they are appended automatically in the code.</Description>
            </Method>
            <Method>
               <Name>iGenSaveSetupInstrCom</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="MMEM:STOR:SET &lt;filename&gt;" Output="false"/>
                     <Input>filename</Input>
                  </Commands>
               </Code>
               <Description>Same as iGenSaveSetup but uses Instrument Commands Function Style instead of m-code. Saves the current VSA setup to a user specified path and filename.
Note: PathFileName needs inputs to be text surrounded by double quotes and then single quotes on the outside, for example, '"c:\temp\test"'.</Description>
            </Method>
            <Method>
               <Name>iGenSaveTrace</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenSaveTrace(obj, TraceIndex, PathFileName, FileType, Header)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '0' = Trace A
%    '1' = Trace B
%    '2'= Trace C, etc.
%Filename = Enter as text path and filename. For example, 'c:\temp\test'
%FileType = (must be either 'CSV', 'MAT', 'MAT4', 'MAT7', 'N5110A', 'N5106A', 'SDF', 'TEXT')
%Header = (String '1' to save the header data and '0' to NOT save the header data)

%Get the interface object
interface=get(obj,'interface');

%Save the VSA setup to the file and path specificed by PathFileName
%Note that double quotes around the text as required by the VSA
%are inserted by the command below and therefore are not required as
%user input.
fprintf(interface,['MMEM:STOR:TRAC ', TraceIndex, ',"', PathFileName, '","', ...
  FileType, '",', Header]);</MCode>
               </Code>
               <Description>Allows a user to save a trace to a file

Required inputs are
TraceIndex = String where 
    '0' = Trace A
    '1' = Trace B
    '2'= Trace C, etc.
PathFileName = Enter as text path and filename. For example, 'c:\temp\test'
FileType (must be either 'CSV', 'MAT', 'MAT4', 'MAT7', 'N5110A', 'N5106A', 'SDF', 'TEXT')
Header (String '1' to save the header data and '0' to NOT save the header data)</Description>
            </Method>
            <Method>
               <Name>iGenSaveTraceInstrCom</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="MMEM:STOR:TRAC &lt;TraceIndex&gt;,&lt;PathFileName&gt;,&lt;FileType&gt;,&lt;Header&gt;" Output="false"/>
                     <Input>TraceIndex</Input>
                     <Input>PathFileName</Input>
                     <Input>FileType</Input>
                     <Input>Header</Input>
                  </Commands>
               </Code>
               <Description>Same as iGenSaveTrace but uses Instrument Commands Function Style instead of m-code. Allows a user to save a trace to a file

Required inputs are
TraceIndex = String where 
    '0' = Trace A
    '1' = Trace B
    '2'= Trace C, etc.
PathFileName = Enter as text path and filename. For example, '"c:\temp\test"'
FileType (must be either '"CSV"', '"MAT"', '"MAT4"', '"MAT7"', '"N5110A"', '"N5106A"', '"SDF"', '"TEXT"')
Header (String '1' to save the header data and '0' to NOT save the header data)

Note: PathFileName and FileType need inputs to be text surrounded by double quotes and then single quotes on the outside.</Description>
            </Method>
            <Method>
               <Name>iGenSCPIQuery</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function res=iGenSCPIQuery(obj,cmd)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

interface=get(obj,'interface');

res=query(interface,cmd);</MCode>
               </Code>
               <Description>SCPI_Query sends an SCPI string to the instrument and returns its response.

Input parameters: SCPI string
Output parameters: response string from the instrument</Description>
            </Method>
            <Method>
               <Name>iGenSCPIWrite</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenSCPIWrite(obj,cmd)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

interface=get(obj,'interface');

fprintf(interface,cmd);</MCode>
               </Code>
               <Description>SCPI_Write sends an SCPI string to the instrument

Input parameters: SCPI string
Output parameters: none
</Description>
            </Method>
            <Method>
               <Name>iGenSetCentFreq</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="FREQ:CENT " Output="false"/>
                     <Input>Freq</Input>
                  </Commands>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>iGenStartRecording</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="INIT:REC:IMM" Output="false"/>
                  </Commands>
               </Code>
               <Description>Pauses the current measruement and start recording the input data.</Description>
            </Method>
            <Method>
               <Name>iGenStopMeas</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="INIT:ABOR" Output="false"/>
                  </Commands>
               </Code>
               <Description>Immediately stop the measurement clearing all measurement data.</Description>
            </Method>
            <Method>
               <Name>iGenSysPresetTrace</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="SYST:PRES:TRAC" Output="false"/>
                  </Commands>
               </Code>
               <Description>Resets the trace back to the default </Description>
            </Method>
            <Method>
               <Name>iGenTraceAdd</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="TRAC:ADD" Output="false"/>
                  </Commands>
               </Code>
               <Description>Add a trace to the display</Description>
            </Method>
            <Method>
               <Name>iGenTraceCount</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="TRAC:COUN?" Format="numeric" Output="true" ReadOutputAs="ASCII"/>
                  </Commands>
               </Code>
               <Description>Get the number of VSA traces that are currently displayed.</Description>
            </Method>
            <Method>
               <Name>iGenTraceDataNameList</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="TRAC:DATA:NAME:LIST?" Format="text" Output="true" ReadOutputAs="ASCII"/>
                  </Commands>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>iGenTraceDataTypeGet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function TraceType = iGenTraceDataTypeGet(obj, TraceIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%Get the interface object
interface=get(obj,'interface');

TraceType = query(interface, ['TRAC', TraceIndex, ':DATA:NAME?']);</MCode>
               </Code>
               <Description>Gets the trace data type (such as Spectrum1 or Main Time1) from the specified Trace.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.</Description>
            </Method>
            <Method>
               <Name>iGenTraceDataTypeSet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenTraceDataTypeSet(obj, TraceIndex, TraceType)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%TraceType = Strings as listed below:
%     '"No Data"'
%     '"Auto Correl1"'
%     '"CCDF1"'
%     '"CDF1"'
%     '"Correction1"'
%     '"Gate Time1"'
%     '"Inst Main Time1"'
%     '"Inst Spec1"'
%     '"Main Time1"'
%     '"PDF1"'
%     '"PSD1"'
%     '"Raw Main Time1"'
%     '"Spectrum1"'
%     '"Acp Summary TrcA"'
%     '"Acp Summary TrcB"'
%     '"Obw Summary TrcA"'
%     '"Obw Summary TrcB"'
%     

%Get the interface object
interface=get(obj,'interface');

fprintf(interface, ['TRAC', TraceIndex, ':DATA:NAME ', TraceType]);</MCode>
               </Code>
               <Description>Sets the trace data type (such as Spectrum1 or Main Time1) of the specified Trace.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.

TraceType = Strings as listed below:
     '"No Data"'
     '"Auto Correl1"'
     '"CCDF1"'
     '"CDF1"'
     '"Correction1"'
     '"Gate Time1"'
     '"Inst Main Time1"'
     '"Inst Spec1"'
     '"Main Time1"'
     '"PDF1"'
     '"PSD1"'
     '"Raw Main Time1"'
     '"Spectrum1"'
     '"Acp Summary TrcA"'
     '"Acp Summary TrcB"'
     '"Obw Summary TrcA"'
     '"Obw Summary TrcB"'</Description>
            </Method>
            <Method>
               <Name>iGenTraceDataValid</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function TraceDataValid=iGenTraceDataValid(obj, TraceIndex)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%Output Argument
%TraceDataValid = Whether the data from the specified trace is valid or not.

%Get the interface object
interface=get(obj,'interface');

%Get whether the data from the specified trace is valid or not.
TraceDataValid=query(interface,['TRAC', TraceIndex, ':DATA:VAL?']);</MCode>
               </Code>
               <Description>Get whether the data from the specified trace is valid and contains at 
least one data value.</Description>
            </Method>
            <Method>
               <Name>iGenTraceDataXGet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function TraceDataX=iGenTraceDataXGet(obj, TraceIndex)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%Output Argument
%TraceDataX = X data values from the specified trace in the format
%determined by the iGenFormatTraceData Property

%Get the interface object
interface=get(obj,'interface');

%Get the X data from the specified trace  in the format determined by the
%iGenFormatTraceData Property.
TraceDataX=query(interface,['TRAC', TraceIndex, ':DATA:X?']);</MCode>
               </Code>
               <Description>Get the X data from the specified trace in the format determined by the iGenFormatTraceData Property.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.

Output Argument
TraceDataX = X  data values from the specified trace in the format determined by the iGenFormatTraceData Property</Description>
            </Method>
            <Method>
               <Name>iGenTraceDataXYGet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function TraceDataXY=iGenTraceDataXYGet(obj, TraceIndex)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%Output Argument
%TraceDataXY = X and Y data values from the specified trace in the format
%determined by the iGenFormatTraceData Property

%Get the interface object
interface=get(obj,'interface');

%Get the XY data from the specified trace.
TraceDataXY=query(interface,['TRAC', TraceIndex, ':DATA:XY?']);</MCode>
               </Code>
               <Description>Get the XY data from the specified trace in the format determined by the iGenFormatTraceData Property.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.

Output Argument
TraceDataXY = X and Y data values from the specified trace in the format determined by the iGenFormatTraceData Property</Description>
            </Method>
            <Method>
               <Name>iGenTraceDataYGet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function TraceDataY=iGenTraceDataYGet(obj, TraceIndex)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%Output Argument
%TraceDataY = Y data values from the specified trace in the format
%determined by the iGenFormatTraceData Property

%Get the interface object
interface=get(obj,'interface');

%Get the Y data from the specified trace  in the format determined by the
%iGenFormatTraceData Property.
TraceDataY=query(interface,['TRAC', TraceIndex, ':DATA:Y?']);</MCode>
               </Code>
               <Description>Get the Y data from the specified trace in the format determined by the iGenFormatTraceData Property.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.

Output Argument
TraceDataY = Y  data values from the specified trace in the format determined by the iGenFormatTraceData Property</Description>
            </Method>
            <Method>
               <Name>iGenTraceFormatYGet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function TraceFormatY=iGenTraceFormatYGet(obj, TraceIndex)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%Output Argument
%TraceFormatY = Y data format from the specified trace.

%Get the interface object
interface=get(obj,'interface');

%Get the Y data format from the specified trace.
TraceFormatY=query(interface,['TRAC', TraceIndex, ':FORM:Y?']);</MCode>
               </Code>
               <Description>Get the Y data format from the specified trace.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
Output Argument
TraceFormatY = Y data format from the specified trace.
</Description>
            </Method>
            <Method>
               <Name>iGenTraceFormatYSet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenTraceFormatYSet(obj, TraceIndex, TraceFormatY)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.

%TraceFormatY = Y data format for the specified trace. The values
%must be strings from the following list that are comprised of text
%surrounded by double quotes and then surrounded by single quotes.
%     '"LogMagnitude"'
%     '"LinearMagnitude"'
%     '"Real"'
%     '"Imaginary"'
%     '"WrapPhase"'
%     '"UnwrapPhase"'
%     '"IQ"'
%     '"Constellation"'
%     '"EyeQ"'
%     '"EyeI"'
%     '"Trellis"'
%     '"GroupDelay"'
%     '"LogMagnitudeLinear"'
%Get the interface object
interface=get(obj,'interface');

%Set the Y data format for the specified trace.
fprintf(interface,['TRAC', TraceIndex, ':FORM:Y ', TraceFormatY]);</MCode>
               </Code>
               <Description>Set the Y data format for the specified trace.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.

TraceFormatY = Y data format for the specified trace. The values
must be strings from the following list that are comprised of text
surrounded by double quotes and then surrounded by single quotes.
     '"LogMagnitude"'
     '"LinearMagnitude"'
     '"Real"'
     '"Imaginary"'
     '"WrapPhase"'
     '"UnwrapPhase"'
     '"IQ"'
     '"Constellation"'
     '"EyeQ"'
     '"EyeI"'
     '"Trellis"'
     '"GroupDelay"'
     '"LogMagnitudeLinear"'</Description>
            </Method>
            <Method>
               <Name>iGenTraceLogXaxisGet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function TraceLogXaxis=iGenTraceLogXaxisGet(obj, TraceIndex)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%Output Argument
%TraceLogXscale = Whether the X axis is a linear or log scale.
%'1' = log scale
%'0' = linear scale

%Get the interface object
interface=get(obj,'interface');

%Get whether the X axis is a linear or log scale for the specified trace.
TraceLogXaxis=query(interface,['TRAC', TraceIndex, ':FORM:X:LOG?']);</MCode>
               </Code>
               <Description>Get whether the X axis is a linear or log scale for the specified trace.

Input Arguments
Required inputs are
TraceIndex = String where 
   	 '1' = Trace A
  	 '2' = Trace B
   	 '3'= Trace C, etc.
Output Argument
TraceLogXscale = Whether the X axis is a linear or log scale.
	'1' = log scale
	'0' = linear scale
</Description>
            </Method>
            <Method>
               <Name>iGenTraceLogXaxisSet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenTraceLogXaxisSet(obj, TraceIndex, TraceLogXaxis)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%TraceLogXaxis = Whether the X axis is a linear or log scale.
%     '1' = log scale
%     '0' = linear scale

%Get the interface object
interface=get(obj,'interface');

%Set the X axis to a linear or log scale for the specified trace.
fprintf(interface,['TRAC', TraceIndex, ':FORM:X:LOG ', TraceLogXaxis]);</MCode>
               </Code>
               <Description>Set the X axis to a linear or log scale for the specified trace.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
TraceLogXaxis = Whether the X axis is a linear or log scale.
     '1' = log scale
     '0' = linear scale
</Description>
            </Method>
            <Method>
               <Name>iGenTraceRemove</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="TRAC:REM" Output="false"/>
                  </Commands>
               </Code>
               <Description>Remove the last trace on the VSA</Description>
            </Method>
            <Method>
               <Name>iGenTraceSpectrogramStyleGet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SpectrogramStyle=iGenTraceSpectrogramStyleGet(obj, TraceIndex)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%Output Argument
%SpectrogramStyle = whether or not the spectrogram/ 3D mapping is on and if so, what
%type of 3D mapping.
%Get the interface object
interface=get(obj,'interface');

%Get whether or not the spectrogram/ 3D mapping is on and if so, what
%type of 3D mapping.
SpectrogramStyle=query(interface,['TRAC', TraceIndex, ':SPEC:STYL?']);</MCode>
               </Code>
               <Description>Get whether or not the spectrogram/ 3D mapping is on and if so, what
type of 3D mapping.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
Output Argument
SpectrogramStyle = whether or not the spectrogram/ 3D mapping is on and if so, what
type of 3D mapping.</Description>
            </Method>
            <Method>
               <Name>iGenTraceSpectrogramStyleSet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenTraceSpectrogramStyleSet(obj, TraceIndex, SpectrogramStyle)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%SpectrogramStyle = whether or not the spectrogram/ 3D mapping is on and if so, what
%type of 3D mapping for the specified trace. Strings as listed below:
%    '"Off"' 
%    '"Spectrogram"'
%    '"TraceSum"'
%    '"TraceDecay"'
%
%Get the interface object
interface=get(obj,'interface');

%Set whether or not the spectrogram/ 3D mapping is on and if so, what
%type of 3D mapping for the specified trace.
fprintf(interface,['TRAC', TraceIndex, ':SPEC:STYL ', SpectrogramStyle]);</MCode>
               </Code>
               <Description>Set whether or not the spectrogram/ 3D mapping is on and if so, what
type of 3D mapping for the specified trace.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
SpectrogramStyle = whether or not the spectrogram/ 3D mapping is on and if so, what
type of 3D mapping for the specified trace. Strings as listed below:
    '"Off"' 
    '"Spectrogram"'
    '"TraceSum"'
    '"TraceDecay"'
</Description>
            </Method>
            <Method>
               <Name>iGenTraceSpectrogramThreshGet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SpectrogramThresh=iGenTraceSpectrogramThreshGet(obj, TraceIndex)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%Output Argument
%SpectrogramThresh = Double between 0 and 100 that affects the minimum
%amplitude value that will be shown in the Spectrogram/ 3D map

%Get the interface object
interface=get(obj,'interface');

%Get the threshold value for the spectrogram.
SpectrogramThresh=query(interface,['TRAC', TraceIndex, ':SPEC:THR?']);</MCode>
               </Code>
               <Description>Get the threshold value for the spectrogram.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
Output Argument
SpectrogramThresh = Double between 0 and 100 that affects the minimum
amplitude value that will be shown in the Spectrogram/ 3D map


</Description>
            </Method>
            <Method>
               <Name>iGenTraceSpectrogramThreshSet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenTraceSpectrogramThreshGet(obj, TraceIndex, SpectrogramThresh)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%SpectrogramThresh = Double between 0 and 100 that affects the minimum
%amplitude value that will be shown in the Spectrogram/ 3D map

%Get the interface object
interface=get(obj,'interface');

%Set the threshold value for the spectrogram.
fprintf(interface,['TRAC', TraceIndex, ':SPEC:THR ', num2str(SpectrogramThresh)]);</MCode>
               </Code>
               <Description>Set the threshold value for the spectrogram.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
SpectrogramThresh = Double between 0 and 100 that affects the minimum
amplitude value that will be shown in the Spectrogram/ 3D map
</Description>
            </Method>
            <Method>
               <Name>iGenTraceYunitsGet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Yunits=iGenTraceYunitsGet(obj, TraceIndex)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%Output Argument
%Yunits = Units used to display the amplitude of the data and can be one of
%the following strings: 
%     '"Auto"'
%     '"Peak"'
%     '"Rms"'
%     '"Power"'
%     '"MilliRms"'

%Get the interface object
interface=get(obj,'interface');

%Get the units used to display the amplitude of the data.
Yunits=query(interface,['TRAC', TraceIndex, ':Y:FORM:UNIT?']);</MCode>
               </Code>
               <Description>Get the units used to display the amplitude of the data.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
Output Argument
Yunits = Units used to display the amplitude of the data and can be one of
the following strings: 
     '"Auto"'
     "'Peak"'
     '"Rms"'
     '"Power"'
     '"MilliRms"'</Description>
            </Method>
            <Method>
               <Name>iGenTraceYunitsSet</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function iGenTraceYunitsSet(obj, TraceIndex, Yunits)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

%Input Arguments
%Required inputs are
%TraceIndex = String where 
%    '1' = Trace A
%    '2' = Trace B
%    '3'= Trace C, etc.
%Yunits = Units used to display the amplitude of the data and can be one of
%the following strings: 
%     'Auto'
%     'Peak'
%     'Rms'
%     'Power'
%     'MilliRms'
% Enter the Yunits as a single text argument, for example 'Power'. Note
%that double quotes around the text are not needed since they are appended
%automatically in the code.

%Get the interface object
interface=get(obj,'interface');

%Set the units used to display the amplitude of the data.
fprintf(interface,['TRAC', TraceIndex, ':Y:FORM:UNIT ', '"', Yunits, '"']);</MCode>
               </Code>
               <Description>Set the units used to display the amplitude of the data.

Input Arguments
Required inputs are
TraceIndex = String where 
    '1' = Trace A
    '2' = Trace B
    '3'= Trace C, etc.
Yunits = Units used to display the amplitude of the data and can be one of
the following strings: 
     'Auto'
     'Peak'
     'Rms'
     'Power'
     'MilliRms'

 Enter the Yunits as a single text argument, for example 'Power'. Note that double quotes around the text are not needed since they are appended automatically in the code.</Description>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>