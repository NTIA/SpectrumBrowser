<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>2.43</FileVersion>
   <DriverName>AgilentRfSigGen.AgilentRfSigGen</DriverName>
   <DriverType>MATLAB IVI-COM</DriverType>
   <InstrumentType>IAgilentRfSigGen3</InstrumentType>
   <InstrumentManufacturer>Manufacturer</InstrumentManufacturer>
   <InstrumentModel>Model</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify>*IDN?</Identify>
   <Reset>*RST</Reset>
   <Selftest>*TST?</Selftest>
   <Error>System:Error?</Error>
   <CreateInitCode>
      <Code>function init(obj)
% This function is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
ictver = ver('instrument');
splittedVer = regexp (ictver.Version , '\.', 'split');
if (~isempty(splittedVer) &amp;&amp; (str2num(char(splittedVer(1))) &lt; 2 || (str2num(char(splittedVer(1))) == 2 &amp;&amp; str2num(char(splittedVer(2))) &lt;= 6)))
   error('instrument:icdevice:newerdriver','This driver requires Instrument Control ToolBox version 2.7.0 (R2008B) or later');
end
</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This function is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

% NOTE: This code is required to support driver interfaces that are collections.
%       Deleting or altering this code may prevent device objects using this
%       driver from operating correctly.

comobj = get(obj, 'Interface');

warning off backtrace
try
	collection = comobj;
	collection = get(collection, 'Events');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Events');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

try
	collection = comobj;
	collection = get(collection, 'Arm');
	collection = get(collection, 'Alarms');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Armalarms');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

try
	collection = comobj;
	collection = get(collection, 'Arm');
	collection = get(collection, 'Sources');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Armsources');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

try
	collection = comobj;
	collection = get(collection, 'Trigger');
	collection = get(collection, 'Alarms');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Triggeralarms');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

try
	collection = comobj;
	collection = get(collection, 'Trigger');
	collection = get(collection, 'Sources');
	instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Triggersources');
catch e
	errorMsg = instrgate('privateCOMGetErrorInfo');
	warning('%s',errorMsg.Description);
end

warning on backtrace
</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>InstrumentCommand</Type>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>FriendlyName</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Interface;
	propertyValue = comobj.FriendlyName;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns a user-friendly name for the instrument.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>SendSoftwareTrigger</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SendSoftwareTrigger(obj)

comobj = obj.Interface;
feature('COM_SafeArraySingleDim',1);
comobj.SendSoftwareTrigger();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sends a software trigger, which causes the signal generator to start signal generation.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ALC</Name>
         <Description>AgilentRfSigGen Automatic Level Control (ALC) interface. It consists of properties which control the behavior of the ALC and a single method to set two of the properties together.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ALC1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Bandwidth</Name>
               <Location>ALC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ALC;
	propertyValue = comobj.Bandwidth;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ALC;
	comobj.Bandwidth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the ALC (Automatic Level Control) bandwidth.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>ALC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ALC;
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ALC;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Turns the ALC (Automatic Level Control) on/off.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>ALC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ALC;
	propertyValue = comobj.Source;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ALC;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenALCSourceInternal" Value="AgilentRfSigGenALCSourceInternal"/>
                     <Enum Name="AgilentRfSigGenALCSourceExternal" Value="AgilentRfSigGenALCSourceExternal"/>
                     <Enum Name="AgilentRfSigGenALCSourceModule" Value="AgilentRfSigGenALCSourceModule"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the ALC (Automatic Level Control) source.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>ALC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, Bandwidth)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ALC;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, double(Bandwidth));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the ALC (Automatic Level Control) of the signal generator's RF output.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>AnalogModulation</Name>
         <Description>AgilentRfSigGen analog modulation interface. It consists of pointers to interfaces for specific forms of analog modulation. It also provides a method to turn all forms of analog modulation off.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="AnalogModulation1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>DisableAll</Name>
               <Location>AnalogModulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DisableAll(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.AnalogModulation;
feature('COM_SafeArraySingleDim',1);
comobj.DisableAll();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Disables all forms of analog modulation: AM, FM, PM, Pulse</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>AnalogModulationAM</Name>
         <Description>AgilentRfSigGen amplitude modulation interface. It consists of properties which control how amplitude modulation is applied to the carrier.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="AnalogModulationAM1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Depth</Name>
               <Location>AnalogModulationAM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.AM;
	propertyValue = comobj.Depth;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.AM;
	comobj.Depth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the extent of modulation the signal generator applies to the RF-signal.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>AnalogModulationAM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.AM;
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.AM;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the signal generator applies analog modulation to the RF output signal.</Description>
            </Property>
            <Property>
               <Name>ExternalCoupling</Name>
               <Location>AnalogModulationAM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.AM;
	propertyValue = comobj.ExternalCoupling;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.AM;
	comobj.ExternalCoupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenAMExternalCouplingAC" Value="AgilentRfSigGenAMExternalCouplingAC"/>
                     <Enum Name="AgilentRfSigGenAMExternalCouplingDC" Value="AgilentRfSigGenAMExternalCouplingDC"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the coupling of the external source of the modulating signal.</Description>
            </Property>
            <Property>
               <Name>NominalVoltage</Name>
               <Location>AnalogModulationAM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.AM;
	propertyValue = comobj.NominalVoltage;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>This is the voltage at which the instrument achieves the amount of modulation specified by the property Depth.</Description>
            </Property>
            <Property>
               <Name>Scaling</Name>
               <Location>AnalogModulationAM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.AM;
	propertyValue = comobj.Scaling;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.AM;
	comobj.Scaling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenAMScaleLinear" Value="AgilentRfSigGenAMScaleLinear"/>
                     <Enum Name="AgilentRfSigGenAMScaleLogarithmic" Value="AgilentRfSigGenAMScaleLogarithmic"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies linear or logarithmic attenuation for amplitude modulation.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>AnalogModulationAM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.AM;
	propertyValue = comobj.Source;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.AM;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source of the signal that is used as the modulating signal: EXT1, EXT2, INT1, INT2.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>AnalogModulationAM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, Scaling, Depth)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.AnalogModulation;
comobj = comobj.AM;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, Scaling, double(Depth));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the attributes that control the signal generator's amplitude modulation.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>AnalogModulationFM</Name>
         <Description>AgilentRfSigGen frequency modulation interface. It consists of properties which control how frequency modulation is applied to the carrier.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="AnalogModulationFM1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Deviation</Name>
               <Location>AnalogModulationFM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.FM;
	propertyValue = comobj.Deviation;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.FM;
	comobj.Deviation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the extent of modulation (peak frequency deviation) the signal generator applies to the RF-signal.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>AnalogModulationFM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.FM;
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.FM;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the signal generator applies frequency modulation to the RF output signal.</Description>
            </Property>
            <Property>
               <Name>ExternalCoupling</Name>
               <Location>AnalogModulationFM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.FM;
	propertyValue = comobj.ExternalCoupling;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.FM;
	comobj.ExternalCoupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenFMExternalCouplingAC" Value="AgilentRfSigGenFMExternalCouplingAC"/>
                     <Enum Name="AgilentRfSigGenFMExternalCouplingDC" Value="AgilentRfSigGenFMExternalCouplingDC"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the coupling of the external source of the modulating signal.</Description>
            </Property>
            <Property>
               <Name>NominalVoltage</Name>
               <Location>AnalogModulationFM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.FM;
	propertyValue = comobj.NominalVoltage;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The voltage at which the instrument achieves the amount of modulation specified by the property Deviation.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>AnalogModulationFM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.FM;
	propertyValue = comobj.Source;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.FM;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source of the signal that is used as the modulating signal: EXT1, EXT2, INT1, INT2.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>AnalogModulationFM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, Deviation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.AnalogModulation;
comobj = comobj.FM;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, double(Deviation));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the attributes that control the signal generator's frequency modulation.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>AnalogModulationPM</Name>
         <Description>AgilentRfSigGen phase modulation interface. It consists of properties which control how phase modulation is applied to the carrier.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="AnalogModulationPM1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Deviation</Name>
               <Location>AnalogModulationPM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.PM;
	propertyValue = comobj.Deviation;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.PM;
	comobj.Deviation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the extent of modulation (peak phase deviation) the signal generator applies to the RF-signal.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>AnalogModulationPM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.PM;
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.PM;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the signal generator applies phase modulation to the RF output signal.</Description>
            </Property>
            <Property>
               <Name>ExternalCoupling</Name>
               <Location>AnalogModulationPM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.PM;
	propertyValue = comobj.ExternalCoupling;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.PM;
	comobj.ExternalCoupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenPMExternalCouplingAC" Value="AgilentRfSigGenPMExternalCouplingAC"/>
                     <Enum Name="AgilentRfSigGenPMExternalCouplingDC" Value="AgilentRfSigGenPMExternalCouplingDC"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the coupling of the external source of the modulating signal.</Description>
            </Property>
            <Property>
               <Name>NominalVoltage</Name>
               <Location>AnalogModulationPM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.PM;
	propertyValue = comobj.NominalVoltage;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>This is the voltage at which the instrument achieves the amount of modulation specified by the property Deviation.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>AnalogModulationPM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.PM;
	propertyValue = comobj.Source;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.PM;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source of the signal that is used as the modulating signal: EXT1, EXT2, INT1, INT2.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>AnalogModulationPM</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, Deviation)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.AnalogModulation;
comobj = comobj.PM;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, double(Deviation));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the attributes that control the signal generator's phase modulation.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>AnalogModulationSource</Name>
         <Description>AgilentRfSigGen analog modulation sources interface. It consists of properties which return the number and names of possible analog modulation sources.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="AnalogModulationSource1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>AnalogModulationSource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AnalogModulation;
	comobj = comobj.Source;
	propertyValue = comobj.Count;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Specifies how many modulation sources are available.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Name</Name>
               <Location>AnalogModulationSource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.AnalogModulation;
comobj = comobj.Source;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Returns the name of a particular modulation source:  INT1, INT2, EXT1, EXT2.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Arm</Name>
         <Description>LxiSync arm interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Arm1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ArmCount</Name>
               <Location>Arm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	propertyValue = comobj.ArmCount;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj.ArmCount = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the number of times the arm has to occur to complete the arm loop; that is, the number of arms that are accepted before the measurement must be initiated again.</Description>
            </Property>
            <Property>
               <Name>Delay</Name>
               <Location>Arm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	propertyValue = comobj.Delay;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj.Delay = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the delay from when the arm logic satisfied until the waiting for trigger state is entered.  The units are seconds.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>ArmAlarm</Name>
         <Description>LxiSync repeated capability interface containing methods and properties that apply to all arm alarms defined for the device.  A particular arm alarm can be accessed using the Item property.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ArmAlarm1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>ArmAlarm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the arm alarm.</Description>
            </Property>
            <Property>
               <Name>Period</Name>
               <Location>ArmAlarm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Period;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Period = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the period of the arm alarm in seconds; that is, the amount of time in seconds that transpire before the alarm repeats.</Description>
            </Property>
            <Property>
               <Name>RepeatCount</Name>
               <Location>ArmAlarm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.RepeatCount;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.RepeatCount = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the number of times to repeat the trigger at the period specified by the Arm Alarm Period attribute.</Description>
            </Property>
            <Property>
               <Name>TimeFraction</Name>
               <Location>ArmAlarm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.TimeFraction;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.TimeFraction = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the fractional portion of the time at which the alarm will go off.</Description>
            </Property>
            <Property>
               <Name>TimeSeconds</Name>
               <Location>ArmAlarm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.TimeSeconds;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.TimeSeconds = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the seconds portion of time at which the alarm will go off.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>ArmAlarm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Enabled, TimeSeconds, TimeFraction, Period, RepeatCount)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Arm;
comobj = comobj.Alarms;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.Configure(logical(Enabled), double(TimeSeconds), double(TimeFraction), double(Period), int32(RepeatCount));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the most commonly configured attributes of the arm alarm sub-system.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ArmAlarms</Name>
         <Description>LxiSync repeated capability interface containing methods and properties that apply to all arm alarms defined for the device.  A particular arm alarm can be accessed using the Item property.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ArmAlarms1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>ArmAlarms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Alarms;
	propertyValue = comobj.Count;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The number of available arm alarms.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Add</Name>
               <Location>ArmAlarms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Add(obj, AlarmName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Arm;
comobj = comobj.Alarms;
feature('COM_SafeArraySingleDim',1);
comobj.Add(AlarmName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function creates a new arm alarm</Description>
            </Method>
            <Method>
               <Name>DisableAll</Name>
               <Location>ArmAlarms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DisableAll(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Arm;
comobj = comobj.Alarms;
feature('COM_SafeArraySingleDim',1);
comobj.DisableAll();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function disables all arm alarms.</Description>
            </Method>
            <Method>
               <Name>Item</Name>
               <Location>ArmAlarms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Arm;
comobj = comobj.Alarms;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>An interface reference pointer to the IIviLxiSyncArmAlarm interface which is selected by the alarm name.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>ArmAlarms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Arm;
comobj = comobj.Alarms;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>The alarm name for a given index.</Description>
            </Method>
            <Method>
               <Name>Remove</Name>
               <Location>ArmAlarms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Remove(obj, AlarmName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Arm;
comobj = comobj.Alarms;
feature('COM_SafeArraySingleDim',1);
comobj.Remove(AlarmName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function removes an arm alarm.</Description>
            </Method>
            <Method>
               <Name>RemoveAllCustomArmAlarms</Name>
               <Location>ArmAlarms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function RemoveAllCustomArmAlarms(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Arm;
comobj = comobj.Alarms;
feature('COM_SafeArraySingleDim',1);
comobj.RemoveAllCustomArmAlarms();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function removes all of the custom arm alarms that were added using the Add Arm Alarm function.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ArmSource</Name>
         <Description>LxiSync repeated capability interface containing methods and properties that apply to all arm sources defined for the device.  A particular arm source can be accessed using the Item property.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ArmSource1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Detection</Name>
               <Location>ArmSource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Detection;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Detection = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenArmSourceDetectionRise" Value="AgilentRfSigGenArmSourceDetectionRise"/>
                     <Enum Name="AgilentRfSigGenArmSourceDetectionFall" Value="AgilentRfSigGenArmSourceDetectionFall"/>
                     <Enum Name="AgilentRfSigGenArmSourceDetectionHigh" Value="AgilentRfSigGenArmSourceDetectionHigh"/>
                     <Enum Name="AgilentRfSigGenArmSourceDetectionLow" Value="AgilentRfSigGenArmSourceDetectionLow"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the style of arm source detection.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>ArmSource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the arm source.</Description>
            </Property>
            <Property>
               <Name>EventId</Name>
               <Location>ArmSource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.EventId;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.EventId = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the LAN event identifier that is associated with this arm source.  LAN Events with this identifier are accepted from  the source described in the filter.</Description>
            </Property>
            <Property>
               <Name>Filter</Name>
               <Location>ArmSource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Filter;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Filter = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies a filter for restricting arm sources.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>ArmSource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Enabled, Detection)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Arm;
comobj = comobj.Sources;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.Configure(logical(Enabled), Detection);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the most commonly configured attributes of the arm source sub-system.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ArmSources</Name>
         <Description>LxiSync repeated capability interface containing methods and properties that apply to all arm sources defined for the device.  A particular arm source can be accessed using the Item property.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ArmSources1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>ArmSources</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Sources;
	propertyValue = comobj.Count;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The number of sources.</Description>
            </Property>
            <Property>
               <Name>OrEnabled</Name>
               <Location>ArmSources</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Sources;
	propertyValue = comobj.OrEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Arm;
	comobj = comobj.Sources;
	comobj.OrEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the OR-summing of the arm sources.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Add</Name>
               <Location>ArmSources</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Add(obj, SourceName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Arm;
comobj = comobj.Sources;
feature('COM_SafeArraySingleDim',1);
comobj.Add(SourceName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function creates a new arm source.</Description>
            </Method>
            <Method>
               <Name>DisableAll</Name>
               <Location>ArmSources</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DisableAll(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Arm;
comobj = comobj.Sources;
feature('COM_SafeArraySingleDim',1);
comobj.DisableAll();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function disables all arm sources.</Description>
            </Method>
            <Method>
               <Name>Item</Name>
               <Location>ArmSources</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Arm;
comobj = comobj.Sources;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>An interface reference pointer to the IIviLxiSyncArmSource interface which is selected by the source name.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>ArmSources</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Arm;
comobj = comobj.Sources;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>The source name for a given index.</Description>
            </Method>
            <Method>
               <Name>Remove</Name>
               <Location>ArmSources</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Remove(obj, SourceName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Arm;
comobj = comobj.Sources;
feature('COM_SafeArraySingleDim',1);
comobj.Remove(SourceName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function removes an arm source.</Description>
            </Method>
            <Method>
               <Name>RemoveAllCustomArmSources</Name>
               <Location>ArmSources</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function RemoveAllCustomArmSources(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Arm;
comobj = comobj.Sources;
feature('COM_SafeArraySingleDim',1);
comobj.RemoveAllCustomArmSources();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function removes all of the custom arm sources that were added using the Add Arm Source function.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>DigitalModulation</Name>
         <Description>AgilentRfSigGen digital modulation interface.  It consists of pointers to interfaces for specific forms of digital modulation.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DigitalModulation1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>DigitalModulationArb</Name>
         <Description>AgilentRfSigGen ARB generator interface. It consists of properties and methods to control and configure the arbitrary waveform generator.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DigitalModulationArb1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ClockFrequency</Name>
               <Location>DigitalModulationArb</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Arb;
	propertyValue = comobj.ClockFrequency;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Arb;
	comobj.ClockFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the sample frequency.</Description>
            </Property>
            <Property>
               <Name>CopyWaveformFromNVMemory</Name>
               <Location>DigitalModulationArb</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Arb;
	propertyValue = comobj.CopyWaveformFromNVMemory;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Arb;
	comobj.CopyWaveformFromNVMemory = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the selected waveform from the pool of avaliable waveforms.</Description>
            </Property>
            <Property>
               <Name>ExternalTriggerSlope</Name>
               <Location>DigitalModulationArb</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Arb;
	propertyValue = comobj.ExternalTriggerSlope;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Arb;
	comobj.ExternalTriggerSlope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenArbExternalTriggerSlopePositive" Value="AgilentRfSigGenArbExternalTriggerSlopePositive"/>
                     <Enum Name="AgilentRfSigGenArbExternalTriggerSlopeNegative" Value="AgilentRfSigGenArbExternalTriggerSlopeNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the trigger event occurs on the rising or falling edge of the input signal.</Description>
            </Property>
            <Property>
               <Name>FilterFrequency</Name>
               <Location>DigitalModulationArb</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Arb;
	propertyValue = comobj.FilterFrequency;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Arb;
	comobj.FilterFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the cut off frequency of the low pass filter.</Description>
            </Property>
            <Property>
               <Name>MaxNumberWaveforms</Name>
               <Location>DigitalModulationArb</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Arb;
	propertyValue = comobj.MaxNumberWaveforms;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the maximum number of waveforms the instrument can hold in memory</Description>
            </Property>
            <Property>
               <Name>SelectedWaveform</Name>
               <Location>DigitalModulationArb</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Arb;
	propertyValue = comobj.SelectedWaveform;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Arb;
	comobj.SelectedWaveform = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the selected waveform from the pool of available waveforms.</Description>
            </Property>
            <Property>
               <Name>TriggerSource</Name>
               <Location>DigitalModulationArb</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Arb;
	propertyValue = comobj.TriggerSource;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Arb;
	comobj.TriggerSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenArbTriggerSourceImmediate" Value="AgilentRfSigGenArbTriggerSourceImmediate"/>
                     <Enum Name="AgilentRfSigGenArbTriggerSourceExternal" Value="AgilentRfSigGenArbTriggerSourceExternal"/>
                     <Enum Name="AgilentRfSigGenArbTriggerSourceSoftware" Value="AgilentRfSigGenArbTriggerSourceSoftware"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the trigger source for the ARB waveform.</Description>
            </Property>
            <Property>
               <Name>WaveformQuantum</Name>
               <Location>DigitalModulationArb</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Arb;
	propertyValue = comobj.WaveformQuantum;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The waveform length must be a multiple of this quantum.</Description>
            </Property>
            <Property>
               <Name>WaveformSizeMax</Name>
               <Location>DigitalModulationArb</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Arb;
	propertyValue = comobj.WaveformSizeMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The waveform length must be equal or less than max size.</Description>
            </Property>
            <Property>
               <Name>WaveformSizeMin</Name>
               <Location>DigitalModulationArb</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Arb;
	propertyValue = comobj.WaveformSizeMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The waveform length must be equal or greater than min size.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ClearAllWaveforms</Name>
               <Location>DigitalModulationArb</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearAllWaveforms(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalModulation;
comobj = comobj.Arb;
feature('COM_SafeArraySingleDim',1);
comobj.ClearAllWaveforms();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function deletes all waveforms from the pool of waveforms.</Description>
            </Method>
            <Method>
               <Name>Configure</Name>
               <Location>DigitalModulationArb</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, ClockFrequency, FilterFrequency)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalModulation;
comobj = comobj.Arb;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(ClockFrequency), double(FilterFrequency));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the ARB generator.</Description>
            </Method>
            <Method>
               <Name>QueryWaveformCapabilities</Name>
               <Location>DigitalModulationArb</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MaxNumberWaveforms, WaveformQuantum, MinWaveformSize, MaxWaveformSize] = QueryWaveformCapabilities(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalModulation;
comobj = comobj.Arb;
feature('COM_SafeArraySingleDim',1);
[MaxNumberWaveforms, WaveformQuantum, MinWaveformSize, MaxWaveformSize] = comobj.QueryWaveformCapabilities(0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function returns the capabilities of the ARB generator.</Description>
            </Method>
            <Method>
               <Name>WriteWaveform</Name>
               <Location>DigitalModulationArb</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [IData, QData] = WriteWaveform(obj, Name, MoreDataPending, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalModulation;
comobj = comobj.Arb;
feature('COM_SafeArraySingleDim',1);
[IData, QData] = comobj.WriteWaveform(Name, [0;0], [0;0], logical(MoreDataPending));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function stores the waveform in the driver's or instrument's memory.</Description>
            </Method>
            <Method>
               <Name>WriteWaveformToNVMemory</Name>
               <Location>DigitalModulationArb</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [IData, QData] = WriteWaveformToNVMemory(obj, Name, MoreDataPending, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalModulation;
comobj = comobj.Arb;
feature('COM_SafeArraySingleDim',1);
[IData, QData] = comobj.WriteWaveformToNVMemory(Name, [0;0], [0;0], logical(MoreDataPending));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function stores the waveform in the driver's or instrument's _permanent_ memory. The arb memory is volatile.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>DigitalModulationBase</Name>
         <Description>AgilentRfSigGen digittal modulation base  interface. It consists of properties and methods useful in specifying basic digital modulation.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DigitalModulationBase1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ClockSource</Name>
               <Location>DigitalModulationBase</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Base;
	propertyValue = comobj.ClockSource;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Base;
	comobj.ClockSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenDigitalModulationBaseClockSourceInternal" Value="AgilentRfSigGenDigitalModulationBaseClockSourceInternal"/>
                     <Enum Name="AgilentRfSigGenDigitalModulationBaseClockSourceExternal" Value="AgilentRfSigGenDigitalModulationBaseClockSourceExternal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source of the clock signal used to generate the digital modulation according to the selected standard.</Description>
            </Property>
            <Property>
               <Name>DataSource</Name>
               <Location>DigitalModulationBase</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Base;
	propertyValue = comobj.DataSource;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Base;
	comobj.DataSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenDigitalModulationBaseDataExternal" Value="AgilentRfSigGenDigitalModulationBaseDataExternal"/>
                     <Enum Name="AgilentRfSigGenDigitalModulationBaseDataPRBS" Value="AgilentRfSigGenDigitalModulationBaseDataPRBS"/>
                     <Enum Name="AgilentRfSigGenDigitalModulationBaseDataBitSequence" Value="AgilentRfSigGenDigitalModulationBaseDataBitSequence"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source of data for DM base modulation.</Description>
            </Property>
            <Property>
               <Name>ExternalClockType</Name>
               <Location>DigitalModulationBase</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Base;
	propertyValue = comobj.ExternalClockType;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Base;
	comobj.ExternalClockType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenDigitalModulationBaseClockTypeBit" Value="AgilentRfSigGenDigitalModulationBaseClockTypeBit"/>
                     <Enum Name="AgilentRfSigGenDigitalModulationBaseClockTypeSymbol" Value="AgilentRfSigGenDigitalModulationBaseClockTypeSymbol"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the type of the external clock signal used to generate the digital modulation.</Description>
            </Property>
            <Property>
               <Name>PRBSType</Name>
               <Location>DigitalModulationBase</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Base;
	propertyValue = comobj.PRBSType;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Base;
	comobj.PRBSType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenDigitalModulationBasePRBS9" Value="AgilentRfSigGenDigitalModulationBasePRBS9"/>
                     <Enum Name="AgilentRfSigGenDigitalModulationBasePRBS11" Value="AgilentRfSigGenDigitalModulationBasePRBS11"/>
                     <Enum Name="AgilentRfSigGenDigitalModulationBasePRBS15" Value="AgilentRfSigGenDigitalModulationBasePRBS15"/>
                     <Enum Name="AgilentRfSigGenDigitalModulationBasePRBS16" Value="AgilentRfSigGenDigitalModulationBasePRBS16"/>
                     <Enum Name="AgilentRfSigGenDigitalModulationBasePRBS20" Value="AgilentRfSigGenDigitalModulationBasePRBS20"/>
                     <Enum Name="AgilentRfSigGenDigitalModulationBasePRBS21" Value="AgilentRfSigGenDigitalModulationBasePRBS21"/>
                     <Enum Name="AgilentRfSigGenDigitalModulationBasePRBS23" Value="AgilentRfSigGenDigitalModulationBasePRBS23"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the type of PRBS for DM base modulation.</Description>
            </Property>
            <Property>
               <Name>SelectedBitSequence</Name>
               <Location>DigitalModulationBase</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Base;
	propertyValue = comobj.SelectedBitSequence;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Base;
	comobj.SelectedBitSequence = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies name of bit sequence used as data for digital modulation.</Description>
            </Property>
            <Property>
               <Name>SelectedStandard</Name>
               <Location>DigitalModulationBase</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Base;
	propertyValue = comobj.SelectedStandard;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Base;
	comobj.SelectedStandard = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the actual standard used by the instrument.</Description>
            </Property>
            <Property>
               <Name>StandardCount</Name>
               <Location>DigitalModulationBase</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.Base;
	propertyValue = comobj.StandardCount;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the count of available standards for digital base modulation.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ClearAllBitSequences</Name>
               <Location>DigitalModulationBase</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearAllBitSequences(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalModulation;
comobj = comobj.Base;
feature('COM_SafeArraySingleDim',1);
comobj.ClearAllBitSequences();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function deletes all named bit sequences.</Description>
            </Method>
            <Method>
               <Name>ConfigureClockSource</Name>
               <Location>DigitalModulationBase</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureClockSource(obj, Source, Type)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalModulation;
comobj = comobj.Base;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureClockSource(Source, Type);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the clock source.</Description>
            </Method>
            <Method>
               <Name>StandardName</Name>
               <Location>DigitalModulationBase</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = StandardName(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalModulation;
comobj = comobj.Base;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.StandardName(int32(Index), varargin{:});
end
[val] = comobj.StandardName(int32(Index));
</MCode>
               </Code>
               <Description>Returns the standard name for the given index. (]</Description>
            </Method>
            <Method>
               <Name>WriteBitSequence</Name>
               <Location>DigitalModulationBase</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Sequence] = WriteBitSequence(obj, Name, BitCount, MoreDataPending, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalModulation;
comobj = comobj.Base;
feature('COM_SafeArraySingleDim',1);
[Sequence] = comobj.WriteBitSequence(Name, int32(BitCount), uint8([0;0]), logical(MoreDataPending));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function writes the bit sequence used as data for the digital base modulation. The parameter, MoreDataPending, must always be false.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>DigitalModulationCDMA</Name>
         <Description>AgilentRfSigGen CDMA interface. It consists of properties and methods to configure CDMA digital modulation.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DigitalModulationCDMA1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ClockSource</Name>
               <Location>DigitalModulationCDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.CDMA;
	propertyValue = comobj.ClockSource;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.CDMA;
	comobj.ClockSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenCDMAClockSourceInternal" Value="AgilentRfSigGenCDMAClockSourceInternal"/>
                     <Enum Name="AgilentRfSigGenCDMAClockSourceExternal" Value="AgilentRfSigGenCDMAClockSourceExternal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source of the clock signal used to generate the digital modulation.</Description>
            </Property>
            <Property>
               <Name>ExternalTriggerSlope</Name>
               <Location>DigitalModulationCDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.CDMA;
	propertyValue = comobj.ExternalTriggerSlope;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.CDMA;
	comobj.ExternalTriggerSlope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenCDMAExternalTriggerSlopePositive" Value="AgilentRfSigGenCDMAExternalTriggerSlopePositive"/>
                     <Enum Name="AgilentRfSigGenCDMAExternalTriggerSlopeNegative" Value="AgilentRfSigGenCDMAExternalTriggerSlopeNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the trigger event occurs on the rising or falling edge of the input signal.</Description>
            </Property>
            <Property>
               <Name>SelectedStandard</Name>
               <Location>DigitalModulationCDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.CDMA;
	propertyValue = comobj.SelectedStandard;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.CDMA;
	comobj.SelectedStandard = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the actual standard used by the instrument. Selecting a standard does program the instrument. It changes which Test Models are available. Selecting a Test Model does program the instrument.</Description>
            </Property>
            <Property>
               <Name>SelectedTestModel</Name>
               <Location>DigitalModulationCDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.CDMA;
	propertyValue = comobj.SelectedTestModel;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.CDMA;
	comobj.SelectedTestModel = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the actual Test Model used by the instrument. The available Test Models are determined by which standard is currently selected. Selecting a Test Model program the instrument.</Description>
            </Property>
            <Property>
               <Name>StandardCount</Name>
               <Location>DigitalModulationCDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.CDMA;
	propertyValue = comobj.StandardCount;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the count of available standards for CDMA modulation.</Description>
            </Property>
            <Property>
               <Name>TestModelCount</Name>
               <Location>DigitalModulationCDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.CDMA;
	propertyValue = comobj.TestModelCount;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the count of available test models. This number varies with the selected standard.</Description>
            </Property>
            <Property>
               <Name>TriggerSource</Name>
               <Location>DigitalModulationCDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.CDMA;
	propertyValue = comobj.TriggerSource;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.CDMA;
	comobj.TriggerSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenCDMATriggerSourceImmediate" Value="AgilentRfSigGenCDMATriggerSourceImmediate"/>
                     <Enum Name="AgilentRfSigGenCDMATriggerSourceExternal" Value="AgilentRfSigGenCDMATriggerSourceExternal"/>
                     <Enum Name="AgilentRfSigGenCDMATriggerSourceSoftware" Value="AgilentRfSigGenCDMATriggerSourceSoftware"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the trigger source for starting the signal generation.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>StandardName</Name>
               <Location>DigitalModulationCDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = StandardName(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalModulation;
comobj = comobj.CDMA;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.StandardName(int32(Index), varargin{:});
end
[val] = comobj.StandardName(int32(Index));
</MCode>
               </Code>
               <Description>Returns the standard name for the given index.</Description>
            </Method>
            <Method>
               <Name>TestModelName</Name>
               <Location>DigitalModulationCDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = TestModelName(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalModulation;
comobj = comobj.CDMA;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.TestModelName(int32(Index), varargin{:});
end
[val] = comobj.TestModelName(int32(Index));
</MCode>
               </Code>
               <Description>Returns the selected test model name. The valid range of values for Index varies with the selected standard. Likewise, the string retruned for an Index value varies with the selected standard.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>DigitalModulationTDMA</Name>
         <Description>AgilentRfSigGen TDMA base interface. It consists of properties and methods to configure TDMA digital modulation.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DigitalModulationTDMA1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ClockSource</Name>
               <Location>DigitalModulationTDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.TDMA;
	propertyValue = comobj.ClockSource;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.TDMA;
	comobj.ClockSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenTDMAClockSourceInternal" Value="AgilentRfSigGenTDMAClockSourceInternal"/>
                     <Enum Name="AgilentRfSigGenTDMAClockSourceExternal" Value="AgilentRfSigGenTDMAClockSourceExternal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source of the clock signal used to generate the digital modulation according to the selected standard.</Description>
            </Property>
            <Property>
               <Name>ExternalClockType</Name>
               <Location>DigitalModulationTDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.TDMA;
	propertyValue = comobj.ExternalClockType;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.TDMA;
	comobj.ExternalClockType = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenTDMAClockTypeBit" Value="AgilentRfSigGenTDMAClockTypeBit"/>
                     <Enum Name="AgilentRfSigGenTDMAClockTypeSymbol" Value="AgilentRfSigGenTDMAClockTypeSymbol"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the type of the external clock signal used to generate the digital modulation.</Description>
            </Property>
            <Property>
               <Name>ExternalTriggerSlope</Name>
               <Location>DigitalModulationTDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.TDMA;
	propertyValue = comobj.ExternalTriggerSlope;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.TDMA;
	comobj.ExternalTriggerSlope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenTDMAExternalTriggerSlopePositive" Value="AgilentRfSigGenTDMAExternalTriggerSlopePositive"/>
                     <Enum Name="AgilentRfSigGenTDMAExternalTriggerSlopeNegative" Value="AgilentRfSigGenTDMAExternalTriggerSlopeNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the trigger event occurs on the rising or falling edge of the input signal.</Description>
            </Property>
            <Property>
               <Name>FrameCount</Name>
               <Location>DigitalModulationTDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.TDMA;
	propertyValue = comobj.FrameCount;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the count of available frame names.</Description>
            </Property>
            <Property>
               <Name>SelectedFrame</Name>
               <Location>DigitalModulationTDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.TDMA;
	propertyValue = comobj.SelectedFrame;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.TDMA;
	comobj.SelectedFrame = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the actual frame/slot used by the instrument. The available frames are determined by which standard is currently selected. Selecting a frame programs the instrument.</Description>
            </Property>
            <Property>
               <Name>SelectedStandard</Name>
               <Location>DigitalModulationTDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.TDMA;
	propertyValue = comobj.SelectedStandard;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.TDMA;
	comobj.SelectedStandard = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the actual standard used by the instrument.</Description>
            </Property>
            <Property>
               <Name>StandardCount</Name>
               <Location>DigitalModulationTDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.TDMA;
	propertyValue = comobj.StandardCount;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the count of available standards for TDMA modulation.</Description>
            </Property>
            <Property>
               <Name>TriggerSource</Name>
               <Location>DigitalModulationTDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.TDMA;
	propertyValue = comobj.TriggerSource;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalModulation;
	comobj = comobj.TDMA;
	comobj.TriggerSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenTDMATriggerSourceImmediate" Value="AgilentRfSigGenTDMATriggerSourceImmediate"/>
                     <Enum Name="AgilentRfSigGenTDMATriggerSourceExternal" Value="AgilentRfSigGenTDMATriggerSourceExternal"/>
                     <Enum Name="AgilentRfSigGenTDMATriggerSourceSoftware" Value="AgilentRfSigGenTDMATriggerSourceSoftware"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source of the trigger signal starting the generation of the frame/slot.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ConfigureClockSource</Name>
               <Location>DigitalModulationTDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureClockSource(obj, Source, Type)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalModulation;
comobj = comobj.TDMA;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureClockSource(Source, Type);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the clock source.</Description>
            </Method>
            <Method>
               <Name>FrameName</Name>
               <Location>DigitalModulationTDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = FrameName(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalModulation;
comobj = comobj.TDMA;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.FrameName(int32(Index), varargin{:});
end
[val] = comobj.FrameName(int32(Index));
</MCode>
               </Code>
               <Description>Returns the frame name for the given index.  The valid range of values for Index varies with the selected standard. Likewise, the string retruned for an Index value varies with the selected standard.</Description>
            </Method>
            <Method>
               <Name>StandardName</Name>
               <Location>DigitalModulationTDMA</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = StandardName(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalModulation;
comobj = comobj.TDMA;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.StandardName(int32(Index), varargin{:});
end
[val] = comobj.StandardName(int32(Index));
</MCode>
               </Code>
               <Description>Returns the standard name for the given index.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Display</Name>
         <Description>AgilentRfSigGen Display interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Display1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>DisplayEnabled</Name>
               <Location>Display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	propertyValue = comobj.DisplayEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	comobj.DisplayEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specififes whether the display is on or off.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Event</Name>
         <Description>LxiSync repeated capability interface containing methods and properties that apply to all events defined for the device.  A particular event can be accessed using the Item property.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Event1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>DestinationPath</Name>
               <Location>Event</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Events;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.DestinationPath;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Events;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.DestinationPath = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies a list of places to send the event.</Description>
            </Property>
            <Property>
               <Name>DriveMode</Name>
               <Location>Event</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Events;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.DriveMode;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Events;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.DriveMode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenEventDriveModeDriven" Value="AgilentRfSigGenEventDriveModeDriven"/>
                     <Enum Name="AgilentRfSigGenEventDriveModeOff" Value="AgilentRfSigGenEventDriveModeOff"/>
                     <Enum Name="AgilentRfSigGenEventDriveModeWiredOr" Value="AgilentRfSigGenEventDriveModeWiredOr"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies how this event is transmitted.</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>Event</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Events;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Slope;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Events;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenSourceSlopeRise" Value="AgilentRfSigGenSourceSlopeRise"/>
                     <Enum Name="AgilentRfSigGenSourceSlopeFall" Value="AgilentRfSigGenSourceSlopeFall"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the slope of the inbound event that will cause the generation of an outbound event.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>Event</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Events;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Source;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Events;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the signal which causes an event to be transmitted.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Event</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, DriveMode, Source, DestinationPath, Slope)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Events;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.Configure(DriveMode, Source, DestinationPath, Slope);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the most commonly configured attributes of the event sub-system.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>EventLog</Name>
         <Description>LxiSync event log interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="EventLog1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>EventLog</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.EventLog;
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.EventLog;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the event logging feature.</Description>
            </Property>
            <Property>
               <Name>EntryCount</Name>
               <Location>EventLog</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.EventLog;
	propertyValue = comobj.EntryCount;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the number of event log entries available.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Clear</Name>
               <Location>EventLog</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.EventLog;
feature('COM_SafeArraySingleDim',1);
comobj.Clear();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function removes all existing entries from the event log.</Description>
            </Method>
            <Method>
               <Name>GetNextEntry</Name>
               <Location>EventLog</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = GetNextEntry(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.EventLog;
feature('COM_SafeArraySingleDim',1);
[val] = comobj.GetNextEntry();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function retrieves and clears the oldest event log entry for the IVI session.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Events</Name>
         <Description>LxiSync repeated capability interface containing methods and properties that apply to all events defined for the device.  A particular event can be accessed using the Item property.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Events1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>Events</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Events;
	propertyValue = comobj.Count;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The number of available events.</Description>
            </Property>
            <Property>
               <Name>WiredOrBiasMode</Name>
               <Location>Events</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Events;
	propertyValue = comobj.WiredOrBiasMode;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Events;
	comobj.WiredOrBiasMode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the LXI device will serve as the wired-OR bias for specific LXI trigger bus lines.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Add</Name>
               <Location>Events</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Add(obj, EventName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Events;
feature('COM_SafeArraySingleDim',1);
comobj.Add(EventName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function creates a new event.</Description>
            </Method>
            <Method>
               <Name>DisableAll</Name>
               <Location>Events</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DisableAll(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Events;
feature('COM_SafeArraySingleDim',1);
comobj.DisableAll();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function disables all events.</Description>
            </Method>
            <Method>
               <Name>Item</Name>
               <Location>Events</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Events;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>An interface reference pointer to the IIviLxiSyncEvent interface which is selected by the event name.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>Events</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Events;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>The event name for a given index.</Description>
            </Method>
            <Method>
               <Name>Remove</Name>
               <Location>Events</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Remove(obj, EventName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Events;
feature('COM_SafeArraySingleDim',1);
comobj.Remove(EventName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function removes an event.</Description>
            </Method>
            <Method>
               <Name>RemoveAllCustomEvents</Name>
               <Location>Events</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function RemoveAllCustomEvents(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Events;
feature('COM_SafeArraySingleDim',1);
comobj.RemoveAllCustomEvents();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function removes all of the custom events that were added using the Add Event function.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentStatus</Name>
         <Description>AgilentRfSigGen Status interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentStatus1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>SerialPoll</Name>
               <Location>InstrumentStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Status;
	propertyValue = comobj.SerialPoll;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Serial poll the instrument status byte.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Clear</Name>
               <Location>InstrumentStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Status;
feature('COM_SafeArraySingleDim',1);
comobj.Clear();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears all event registers and error queue. The enable registers are unaffected.</Description>
            </Method>
            <Method>
               <Name>ConfigureServiceRequest</Name>
               <Location>InstrumentStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureServiceRequest(obj, Reason)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Status;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureServiceRequest(Reason);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears all the enable registers. It then sets the appropriate transition filters and enable registers so when the specified event(s) occur(s) the instrument requests service. All other events are disabled from generating a service request.</Description>
            </Method>
            <Method>
               <Name>Preset</Name>
               <Location>InstrumentStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Preset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Status;
feature('COM_SafeArraySingleDim',1);
comobj.Preset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the SCPI defined enable registers and transition filters. It performs the actions specified by SCPI for the :STATus:PREset command, see SCPI Vol. 2: Command Reference, section 20.7.</Description>
            </Method>
            <Method>
               <Name>Register</Name>
               <Location>InstrumentStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Register(obj, Register, SubRegister, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Status;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Register(Register, SubRegister, varargin{:});
end
[val] = comobj.Register(Register, SubRegister);
</MCode>
               </Code>
               <Description>Return the value of a specific status register.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>IQ</Name>
         <Description>AgilentRfSigGen IQ modulation interface. It consists of properties and methods which control how the in phase and quadrature signals modulate the carrier. It also contains a pointer to interface for impairing the signals.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="IQ1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>IQ</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.IQ;
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.IQ;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the signal generator applies IQ (vector) modulation to the RF output signal.</Description>
            </Property>
            <Property>
               <Name>NominalVoltage</Name>
               <Location>IQ</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.IQ;
	propertyValue = comobj.NominalVoltage;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>This is the voltage at which the instrument achieves full modulation.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>IQ</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.IQ;
	propertyValue = comobj.Source;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.IQ;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenIQSourceDigitalModulationBase" Value="AgilentRfSigGenIQSourceDigitalModulationBase"/>
                     <Enum Name="AgilentRfSigGenIQSourceCDMABase" Value="AgilentRfSigGenIQSourceCDMABase"/>
                     <Enum Name="AgilentRfSigGenIQSourceTDMABase" Value="AgilentRfSigGenIQSourceTDMABase"/>
                     <Enum Name="AgilentRfSigGenIQSourceArbGenerator" Value="AgilentRfSigGenIQSourceArbGenerator"/>
                     <Enum Name="AgilentRfSigGenIQSourceExternal" Value="AgilentRfSigGenIQSourceExternal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source of the signal that the signal generator uses for IQ modulation.</Description>
            </Property>
            <Property>
               <Name>SwapEnabled</Name>
               <Location>IQ</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.IQ;
	propertyValue = comobj.SwapEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.IQ;
	comobj.SwapEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the inverse phase rotation of the IQ signal by swapping the I and Q inputs.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Calibrate</Name>
               <Location>IQ</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Calibrate(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.IQ;
feature('COM_SafeArraySingleDim',1);
comobj.Calibrate();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function performs a calibration of the IQ modulator.</Description>
            </Method>
            <Method>
               <Name>Configure</Name>
               <Location>IQ</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, SwapEnabled)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.IQ;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, logical(SwapEnabled));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the attributes that control the signal generator's IQ modulation.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>IQImpairment</Name>
         <Description>AgilentRfSigGen IQ modulation impairment interface. It consists of properties and methods which distort the I and Q signals to simulate various modulation impairments.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="IQImpairment1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>IQImpairment</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.IQ;
	comobj = comobj.Impairment;
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.IQ;
	comobj = comobj.Impairment;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Turns impairment attributes on/off.</Description>
            </Property>
            <Property>
               <Name>IOffset</Name>
               <Location>IQImpairment</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.IQ;
	comobj = comobj.Impairment;
	propertyValue = comobj.IOffset;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.IQ;
	comobj = comobj.Impairment;
	comobj.IOffset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies an origin offset voltage to the I signal.</Description>
            </Property>
            <Property>
               <Name>QOffset</Name>
               <Location>IQImpairment</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.IQ;
	comobj = comobj.Impairment;
	propertyValue = comobj.QOffset;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.IQ;
	comobj = comobj.Impairment;
	comobj.QOffset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies an origin offset voltage to the Q signal.</Description>
            </Property>
            <Property>
               <Name>Ratio</Name>
               <Location>IQImpairment</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.IQ;
	comobj = comobj.Impairment;
	propertyValue = comobj.Ratio;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.IQ;
	comobj = comobj.Impairment;
	comobj.Ratio = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the gain imbalance between the I and Q channels.</Description>
            </Property>
            <Property>
               <Name>Skew</Name>
               <Location>IQImpairment</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.IQ;
	comobj = comobj.Impairment;
	propertyValue = comobj.Skew;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.IQ;
	comobj = comobj.Impairment;
	comobj.Skew = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the adjustment of the phase angle between the I and Q vectors.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>IQImpairment</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, IOffset, QOffset, Ratio, Skew)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.IQ;
comobj = comobj.Impairment;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(IOffset), double(QOffset), double(Ratio), double(Skew));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the attributes that simulate or correct impairment for the signal generator's IQ (vector) modulation.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>LFGenerator</Name>
         <Description>AgilentRfSigGen low frequency generator interface. It consists of properties and methods to confgure a low frequency generator that is generarlly used as an analog modulation source.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="LFGenerator1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ActiveLFGenerator</Name>
               <Location>LFGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.LFGenerator;
	propertyValue = comobj.ActiveLFGenerator;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.LFGenerator;
	comobj.ActiveLFGenerator = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Selects the generator that is used as the modulating signal or for LF output: LFG1 (ESG&amp;PSG), LFG2 (PSG). Note that the LFG1 is equivalent to INT1 and LFG2 is equivalent to INT2 when selecting AnalogModulation source.</Description>
            </Property>
            <Property>
               <Name>Count</Name>
               <Location>LFGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.LFGenerator;
	propertyValue = comobj.Count;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the number of LF generators.</Description>
            </Property>
            <Property>
               <Name>Frequency</Name>
               <Location>LFGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.LFGenerator;
	propertyValue = comobj.Frequency;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.LFGenerator;
	comobj.Frequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the frequency of the active LF generator.</Description>
            </Property>
            <Property>
               <Name>Waveform</Name>
               <Location>LFGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.LFGenerator;
	propertyValue = comobj.Waveform;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.LFGenerator;
	comobj.Waveform = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenLFGeneratorWaveformSine" Value="AgilentRfSigGenLFGeneratorWaveformSine"/>
                     <Enum Name="AgilentRfSigGenLFGeneratorWaveformRectangle" Value="AgilentRfSigGenLFGeneratorWaveformRectangle"/>
                     <Enum Name="AgilentRfSigGenLFGeneratorWaveformTriangle" Value="AgilentRfSigGenLFGeneratorWaveformTriangle"/>
                     <Enum Name="AgilentRfSigGenLFGeneratorWaveformRampUp" Value="AgilentRfSigGenLFGeneratorWaveformRampUp"/>
                     <Enum Name="AgilentRfSigGenLFGeneratorWaveformRampDown" Value="AgilentRfSigGenLFGeneratorWaveformRampDown"/>
                     <Enum Name="AgilentRfSigGenLFGeneratorWaveformNoise" Value="AgilentRfSigGenLFGeneratorWaveformNoise"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the waveform of the active LF generator.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>LFGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Frequency, Waveform)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.LFGenerator;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Frequency), Waveform);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the LF generator output frequency and waveform.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>LFGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.LFGenerator;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Returns the LF generator name for a given index: LFG1, LFG2.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>LFGeneratorOutput</Name>
         <Description>AgilentRfSigGen low frequency generator output interface. Its properties and methods control the amplitude and enabling of the output from the generator.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="LFGeneratorOutput1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Amplitude</Name>
               <Location>LFGeneratorOutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.LFGenerator;
	comobj = comobj.Output;
	propertyValue = comobj.Amplitude;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.LFGenerator;
	comobj = comobj.Output;
	comobj.Amplitude = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the output voltage of the LF generator.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>LFGeneratorOutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.LFGenerator;
	comobj = comobj.Output;
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.LFGenerator;
	comobj = comobj.Output;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Turns the LF generator output on/off.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>LFGeneratorOutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Amplitude, Enabled)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.LFGenerator;
comobj = comobj.Output;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Amplitude), logical(Enabled));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the attributes of the LF generator (within the RF signal generator).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Ptp</Name>
         <Description>AgilentRfSigGen Ptp Interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Ptp1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>PtpConfiguration</Name>
         <Description>AgilentRfSigGen Ptp Configuration interface, contains properties to setup Ptp Clock</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="PtpConfiguration1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Accuracy</Name>
               <Location>PtpConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	propertyValue = comobj.Accuracy;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	comobj.Accuracy = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenPtpAccuracyNS25" Value="AgilentRfSigGenPtpAccuracyNS25"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyNS100" Value="AgilentRfSigGenPtpAccuracyNS100"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyNS250" Value="AgilentRfSigGenPtpAccuracyNS250"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyNS1000" Value="AgilentRfSigGenPtpAccuracyNS1000"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyNS2500" Value="AgilentRfSigGenPtpAccuracyNS2500"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyUS10" Value="AgilentRfSigGenPtpAccuracyUS10"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyUS25" Value="AgilentRfSigGenPtpAccuracyUS25"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyUS100" Value="AgilentRfSigGenPtpAccuracyUS100"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyUS250" Value="AgilentRfSigGenPtpAccuracyUS250"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyUS1000" Value="AgilentRfSigGenPtpAccuracyUS1000"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyUS2500" Value="AgilentRfSigGenPtpAccuracyUS2500"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyMS10" Value="AgilentRfSigGenPtpAccuracyMS10"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyMS25" Value="AgilentRfSigGenPtpAccuracyMS25"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyMS100" Value="AgilentRfSigGenPtpAccuracyMS100"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyMS250" Value="AgilentRfSigGenPtpAccuracyMS250"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyS10" Value="AgilentRfSigGenPtpAccuracyS10"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyGT10S" Value="AgilentRfSigGenPtpAccuracyGT10S"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyUnknown" Value="AgilentRfSigGenPtpAccuracyUnknown"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the typical offset from the correct time.</Description>
            </Property>
            <Property>
               <Name>AnnounceInterval</Name>
               <Location>PtpConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	propertyValue = comobj.AnnounceInterval;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	comobj.AnnounceInterval = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the time in seconds between PTP announce packets.</Description>
            </Property>
            <Property>
               <Name>AnnouncReceiptTimeOut</Name>
               <Location>PtpConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	propertyValue = comobj.AnnouncReceiptTimeOut;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	comobj.AnnouncReceiptTimeOut = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the time that a PTP clock in the Slave or Listening state waits to receive a PTP announce packet before transitioning to the Master state.</Description>
            </Property>
            <Property>
               <Name>DelayRequestInterval</Name>
               <Location>PtpConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	propertyValue = comobj.DelayRequestInterval;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	comobj.DelayRequestInterval = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the delay request interval property for the instrument PTP clock.  This property is used by the master clock to specify the interval between delay request packets sent from the slave to the master clock.  Slaves use a randomly-chos</Description>
            </Property>
            <Property>
               <Name>Deviation</Name>
               <Location>PtpConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	propertyValue = comobj.Deviation;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>This property gets the measured standard deviation of the instrument PTP clock time from the master PTP clock time.</Description>
            </Property>
            <Property>
               <Name>Domain</Name>
               <Location>PtpConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	propertyValue = comobj.Domain;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	comobj.Domain = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the Domain property for the instrument PTP clock.  This property specifies the group of PTP clocks that the instrument PTP clock will recognize for synchronization.  This allows measurement systems with different masters to share t</Description>
            </Property>
            <Property>
               <Name>GrandmasterAccuracy</Name>
               <Location>PtpConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	propertyValue = comobj.GrandmasterAccuracy;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenPtpAccuracyNS25" Value="AgilentRfSigGenPtpAccuracyNS25"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyNS100" Value="AgilentRfSigGenPtpAccuracyNS100"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyNS250" Value="AgilentRfSigGenPtpAccuracyNS250"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyNS1000" Value="AgilentRfSigGenPtpAccuracyNS1000"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyNS2500" Value="AgilentRfSigGenPtpAccuracyNS2500"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyUS10" Value="AgilentRfSigGenPtpAccuracyUS10"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyUS25" Value="AgilentRfSigGenPtpAccuracyUS25"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyUS100" Value="AgilentRfSigGenPtpAccuracyUS100"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyUS250" Value="AgilentRfSigGenPtpAccuracyUS250"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyUS1000" Value="AgilentRfSigGenPtpAccuracyUS1000"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyUS2500" Value="AgilentRfSigGenPtpAccuracyUS2500"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyMS10" Value="AgilentRfSigGenPtpAccuracyMS10"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyMS25" Value="AgilentRfSigGenPtpAccuracyMS25"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyMS100" Value="AgilentRfSigGenPtpAccuracyMS100"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyMS250" Value="AgilentRfSigGenPtpAccuracyMS250"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyS10" Value="AgilentRfSigGenPtpAccuracyS10"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyGT10S" Value="AgilentRfSigGenPtpAccuracyGT10S"/>
                     <Enum Name="AgilentRfSigGenPtpAccuracyUnknown" Value="AgilentRfSigGenPtpAccuracyUnknown"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>This property gets the accuracy of the Grandmaster PTP clock.</Description>
            </Property>
            <Property>
               <Name>GrandmasterMacAddress</Name>
               <Location>PtpConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	propertyValue = comobj.GrandmasterMacAddress;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>This property gets the GrandMaster clock MAC address.</Description>
            </Property>
            <Property>
               <Name>GrandmasterTraceability</Name>
               <Location>PtpConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	propertyValue = comobj.GrandmasterTraceability;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenPtpTraceabilityAtomic" Value="AgilentRfSigGenPtpTraceabilityAtomic"/>
                     <Enum Name="AgilentRfSigGenPtpTraceabilityGPS" Value="AgilentRfSigGenPtpTraceabilityGPS"/>
                     <Enum Name="AgilentRfSigGenPtpTraceabilityRadio" Value="AgilentRfSigGenPtpTraceabilityRadio"/>
                     <Enum Name="AgilentRfSigGenPtpTraceabilityPTP" Value="AgilentRfSigGenPtpTraceabilityPTP"/>
                     <Enum Name="AgilentRfSigGenPtpTraceabilityNTP" Value="AgilentRfSigGenPtpTraceabilityNTP"/>
                     <Enum Name="AgilentRfSigGenPtpTraceabilityHandset" Value="AgilentRfSigGenPtpTraceabilityHandset"/>
                     <Enum Name="AgilentRfSigGenPtpTraceabilityOther" Value="AgilentRfSigGenPtpTraceabilityOther"/>
                     <Enum Name="AgilentRfSigGenPtpTraceabilityOscillator" Value="AgilentRfSigGenPtpTraceabilityOscillator"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>This property gets the source of time for the PTP grandmaster clock in the system.</Description>
            </Property>
            <Property>
               <Name>MasterMacAddress</Name>
               <Location>PtpConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	propertyValue = comobj.MasterMacAddress;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>This property gets the Master Clock MAC address.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>PtpConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	propertyValue = comobj.Offset;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>This property gets the current difference or offset in time between the instrument PTP clock time and the master PTP clock time.</Description>
            </Property>
            <Property>
               <Name>Priority1</Name>
               <Location>PtpConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	propertyValue = comobj.Priority1;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	comobj.Priority1 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the clock's Priority1 property which helps characterize the quality of the instrument PTP clock and its suitability to be the master PTP clock.The values for this property are 0 to 255, with 0 being the best.  The default is 128.</Description>
            </Property>
            <Property>
               <Name>Priority2</Name>
               <Location>PtpConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	propertyValue = comobj.Priority2;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	comobj.Priority2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the clock's Priority2 property which helps characterize the quality of the instrument PTP clock and its suitability to be the master PTP clock.The values for this property are 0 to 255, with 0 being the best.  The default is 128.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>PtpConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	propertyValue = comobj.State;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenPtpStateInitializing" Value="AgilentRfSigGenPtpStateInitializing"/>
                     <Enum Name="AgilentRfSigGenPtpStateFaulty" Value="AgilentRfSigGenPtpStateFaulty"/>
                     <Enum Name="AgilentRfSigGenPtpStateDisabled" Value="AgilentRfSigGenPtpStateDisabled"/>
                     <Enum Name="AgilentRfSigGenPtpStateListening" Value="AgilentRfSigGenPtpStateListening"/>
                     <Enum Name="AgilentRfSigGenPtpStatePremaster" Value="AgilentRfSigGenPtpStatePremaster"/>
                     <Enum Name="AgilentRfSigGenPtpStateMaster" Value="AgilentRfSigGenPtpStateMaster"/>
                     <Enum Name="AgilentRfSigGenPtpStatePassive" Value="AgilentRfSigGenPtpStatePassive"/>
                     <Enum Name="AgilentRfSigGenPtpStateUncalibrated" Value="AgilentRfSigGenPtpStateUncalibrated"/>
                     <Enum Name="AgilentRfSigGenPtpStateSlave" Value="AgilentRfSigGenPtpStateSlave"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>This property gets the current operational state of the instrument PTP clock.</Description>
            </Property>
            <Property>
               <Name>SyncInterval</Name>
               <Location>PtpConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	propertyValue = comobj.SyncInterval;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	comobj.SyncInterval = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the sync interval property in seconds.  This is the rate at which PTP sync packets are transmitted when the instrument PTP clock is acting as a master PTP clock.</Description>
            </Property>
            <Property>
               <Name>Traceability</Name>
               <Location>PtpConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	propertyValue = comobj.Traceability;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	comobj.Traceability = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenPtpTraceabilityAtomic" Value="AgilentRfSigGenPtpTraceabilityAtomic"/>
                     <Enum Name="AgilentRfSigGenPtpTraceabilityGPS" Value="AgilentRfSigGenPtpTraceabilityGPS"/>
                     <Enum Name="AgilentRfSigGenPtpTraceabilityRadio" Value="AgilentRfSigGenPtpTraceabilityRadio"/>
                     <Enum Name="AgilentRfSigGenPtpTraceabilityPTP" Value="AgilentRfSigGenPtpTraceabilityPTP"/>
                     <Enum Name="AgilentRfSigGenPtpTraceabilityNTP" Value="AgilentRfSigGenPtpTraceabilityNTP"/>
                     <Enum Name="AgilentRfSigGenPtpTraceabilityHandset" Value="AgilentRfSigGenPtpTraceabilityHandset"/>
                     <Enum Name="AgilentRfSigGenPtpTraceabilityOther" Value="AgilentRfSigGenPtpTraceabilityOther"/>
                     <Enum Name="AgilentRfSigGenPtpTraceabilityOscillator" Value="AgilentRfSigGenPtpTraceabilityOscillator"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the source of time for the instrument PTP clock when it is the grandmaster PTP clock in the system.</Description>
            </Property>
            <Property>
               <Name>Variance</Name>
               <Location>PtpConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Configuration;
	propertyValue = comobj.Variance;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>This property gets the measured variance of the instrument PTP clock time from the master PTP clock time.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>PtpServoAlgorithm</Name>
         <Description>AgilentRfSigGen Ptp Servo Alogorithm interface, conatins methods and properties to configure servo algorithm and pointer to Servo log interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="PtpServoAlgorithm1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Asymmetry</Name>
               <Location>PtpServoAlgorithm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	propertyValue = comobj.Asymmetry;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	comobj.Asymmetry = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the difference in seconds between the master-to-slave packet travel time and the slave-to-master packet travel time.</Description>
            </Property>
            <Property>
               <Name>CoarseFineThreshold</Name>
               <Location>PtpServoAlgorithm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	propertyValue = comobj.CoarseFineThreshold;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	comobj.CoarseFineThreshold = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This Property sets/gets the coarse/fine threshold of the PTP clock servo algorithm which is used to determine whether the 'coarse' or 'fine' parameters are used for adjusting the instrument PTP clock time.  The default value is 2e-13.  The minimum value i</Description>
            </Property>
            <Property>
               <Name>CoarseIntegralConstant</Name>
               <Location>PtpServoAlgorithm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	propertyValue = comobj.CoarseIntegralConstant;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	comobj.CoarseIntegralConstant = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the coarse integral constant for the PTP clock servo algorithm.  This value is used to converge the PTP clock   s time quickly, at the risk of overdriving the servo once it has converged.</Description>
            </Property>
            <Property>
               <Name>CoarseProportionalConstant</Name>
               <Location>PtpServoAlgorithm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	propertyValue = comobj.CoarseProportionalConstant;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	comobj.CoarseProportionalConstant = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets  the coarse proportional constant for the PTP clock servo algorithm.  This value is used to converge the PTP clock   s time quickly, at the risk of overdriving the servo once it has converged.</Description>
            </Property>
            <Property>
               <Name>FineIntegralConstant</Name>
               <Location>PtpServoAlgorithm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	propertyValue = comobj.FineIntegralConstant;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	comobj.FineIntegralConstant = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the fine integral constant for the PTP clock servo algorithm.  This value is used to give the servo a narrow bandwidth, so it is relatively immune to variations in the master, slave, or network delay, at the risk of converging too </Description>
            </Property>
            <Property>
               <Name>FineProportionalConstant</Name>
               <Location>PtpServoAlgorithm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	propertyValue = comobj.FineProportionalConstant;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	comobj.FineProportionalConstant = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the fine proportional constant for the PTP clock servo algorithm.  This value is used to give the servo a narrow bandwidth, so it is relatively immune to variations in the master, slave, or network delay, at the risk of converging </Description>
            </Property>
            <Property>
               <Name>OutlierMaxDiscardCount</Name>
               <Location>PtpServoAlgorithm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	propertyValue = comobj.OutlierMaxDiscardCount;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	comobj.OutlierMaxDiscardCount = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the maximum for ignoring consecutive outlier PTP sync packets.  When this threshold is exceeded, the outliers are no longer ignored and are used by the servo algorithm.  The default is 5 outlier packets.</Description>
            </Property>
            <Property>
               <Name>OutlierMinDiscardThreshold</Name>
               <Location>PtpServoAlgorithm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	propertyValue = comobj.OutlierMinDiscardThreshold;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	comobj.OutlierMinDiscardThreshold = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the minimum for ignoring consecutive outlier PTP sync packets.</Description>
            </Property>
            <Property>
               <Name>OutlierThreshold</Name>
               <Location>PtpServoAlgorithm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	propertyValue = comobj.OutlierThreshold;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	comobj.OutlierThreshold = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the outlier threshold which determines if a PTP sync or delay request packet is considered valid or a statistical outlier.  The units are in number of standard deviations from currently measured average packet latency or delay.  Th</Description>
            </Property>
            <Property>
               <Name>OutlierThresholdEnabled</Name>
               <Location>PtpServoAlgorithm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	propertyValue = comobj.OutlierThresholdEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	comobj.OutlierThresholdEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the outlier threshold to be active.</Description>
            </Property>
            <Property>
               <Name>SteeringThreshold</Name>
               <Location>PtpServoAlgorithm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	propertyValue = comobj.SteeringThreshold;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	comobj.SteeringThreshold = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the steer threshold which determines if the instrument PTP clock time is too different from the master PTP clock time and should be set versus being steered or incrementally adjusted to converge with the master PTP clock time.  The</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>PtpServoAlgorithm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Asymmetry, CoarseFineThreshold, CoarseProportionalConstant, CoarseIntegralConstant, FineProportionalConstant, FineIntegralConstant, OutlierMaxDiscardCount, OutlierThreshold, SteeringThreshold)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Ptp;
comobj = comobj.ServoAlgorithm;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Asymmetry), double(CoarseFineThreshold), double(CoarseProportionalConstant), double(CoarseIntegralConstant), double(FineProportionalConstant), double(FineIntegralConstant), int32(OutlierMaxDiscardCount), double(OutlierThreshold), double(SteeringThreshold));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method configures the Servo Algorithm's attributes.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>PtpServoAlgorithmLog</Name>
         <Description>AgilentRfSigGen Ptp Servo Log interface, contains methods and properties to manage Servo Log.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="PtpServoAlgorithmLog1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CircularModeEnabled</Name>
               <Location>PtpServoAlgorithmLog</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	comobj = comobj.Log;
	propertyValue = comobj.CircularModeEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	comobj = comobj.Log;
	comobj.CircularModeEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the log to operate in circular mode which overwrites the oldest log entry with the newest log entry when the log is full.</Description>
            </Property>
            <Property>
               <Name>Count</Name>
               <Location>PtpServoAlgorithmLog</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	comobj = comobj.Log;
	propertyValue = comobj.Count;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>This property gets the number of entries currently in the log.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>PtpServoAlgorithmLog</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	comobj = comobj.Log;
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	comobj = comobj.Log;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the log to accept log entries.  If disabled then log entries are discarded.</Description>
            </Property>
            <Property>
               <Name>Size</Name>
               <Location>PtpServoAlgorithmLog</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	comobj = comobj.Log;
	propertyValue = comobj.Size;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.ServoAlgorithm;
	comobj = comobj.Log;
	comobj.Size = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the maximum number of entries that can be contained in the log.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ClearAll</Name>
               <Location>PtpServoAlgorithmLog</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearAll(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Ptp;
comobj = comobj.ServoAlgorithm;
comobj = comobj.Log;
feature('COM_SafeArraySingleDim',1);
comobj.ClearAll();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method clears the contents of the log.</Description>
            </Method>
            <Method>
               <Name>ClearStatistics</Name>
               <Location>PtpServoAlgorithmLog</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearStatistics(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Ptp;
comobj = comobj.ServoAlgorithm;
comobj = comobj.Log;
feature('COM_SafeArraySingleDim',1);
comobj.ClearStatistics();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method clears the long-term statistics of the servo performance.</Description>
            </Method>
            <Method>
               <Name>GetIndexedEntry</Name>
               <Location>PtpServoAlgorithmLog</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = GetIndexedEntry(obj, Index)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Ptp;
comobj = comobj.ServoAlgorithm;
comobj = comobj.Log;
feature('COM_SafeArraySingleDim',1);
[val] = comobj.GetIndexedEntry(int32(Index));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method returns the nth log entry in the servo algorithm offset log specified by Index.</Description>
            </Method>
            <Method>
               <Name>GetNextEntry</Name>
               <Location>PtpServoAlgorithmLog</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = GetNextEntry(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Ptp;
comobj = comobj.ServoAlgorithm;
comobj = comobj.Log;
feature('COM_SafeArraySingleDim',1);
[val] = comobj.GetNextEntry();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method returns the next log entry in the servo algorithm offset log and removes this entry from the log.</Description>
            </Method>
            <Method>
               <Name>GetStatistics</Name>
               <Location>PtpServoAlgorithmLog</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Samples, MeanOffset, StdDevOffset, MaxOffset, MinOffset] = GetStatistics(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Ptp;
comobj = comobj.ServoAlgorithm;
comobj = comobj.Log;
feature('COM_SafeArraySingleDim',1);
[Samples, MeanOffset, StdDevOffset, MaxOffset, MinOffset] = comobj.GetStatistics(0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method returns the long-term statistics of the servo log that characterize the performance of the instrument PTP clock's offset from the master PTP clock.</Description>
            </Method>
            <Method>
               <Name>ReadAll</Name>
               <Location>PtpServoAlgorithmLog</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = ReadAll(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Ptp;
comobj = comobj.ServoAlgorithm;
comobj = comobj.Log;
feature('COM_SafeArraySingleDim',1);
[val] = comobj.ReadAll();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method returns the contents of the servo algorithm offset log.</Description>
            </Method>
            <Method>
               <Name>SetCircularReferenceIndex</Name>
               <Location>PtpServoAlgorithmLog</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetCircularReferenceIndex(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Ptp;
comobj = comobj.ServoAlgorithm;
comobj = comobj.Log;
feature('COM_SafeArraySingleDim',1);
comobj.SetCircularReferenceIndex();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method set or freezes the beginning entry of the log when in circular mode to the most recently added entry at the time of the command.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>PtpSynchronization</Name>
         <Description>AgilentRfSigGen Ptp Synchronization interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="PtpSynchronization1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>IsMaster</Name>
               <Location>PtpSynchronization</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Synchronization;
	propertyValue = comobj.IsMaster;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Thsi property gets whether the instrument PTP clock is acting as a master PTP clock.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>PtpTime</Name>
         <Description>AgilentRfSigGen Ptp Time interface, contains methods and properties to handle the PTP Time.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="PtpTime1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>DayLightSavings</Name>
               <Location>PtpTime</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Time;
	propertyValue = comobj.DayLightSavings;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Time;
	comobj.DayLightSavings = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the daylight savings property indicating whether the instrument local time takes into account daylight savings time.</Description>
            </Property>
            <Property>
               <Name>LeapSecondsOffset</Name>
               <Location>PtpTime</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Time;
	propertyValue = comobj.LeapSecondsOffset;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Time;
	comobj.LeapSecondsOffset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the current leap seconds offset between UTC and TAI time standards.</Description>
            </Property>
            <Property>
               <Name>LocalTime</Name>
               <Location>PtpTime</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Time;
	propertyValue = comobj.LocalTime;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>This property sets/gets the current local (time zone) time formatted as date time string.</Description>
            </Property>
            <Property>
               <Name>TAI</Name>
               <Location>PtpTime</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Time;
	propertyValue = comobj.TAI;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>This property gets the PTP time formatted as a date time string.</Description>
            </Property>
            <Property>
               <Name>TimeZone</Name>
               <Location>PtpTime</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Time;
	propertyValue = comobj.TimeZone;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Time;
	comobj.TimeZone = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>This property sets/gets the time zone as an offset in number of hours, minutes, and seconds (+/-00:00:00) from GMT.</Description>
            </Property>
            <Property>
               <Name>UTC</Name>
               <Location>PtpTime</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Ptp;
	comobj = comobj.Time;
	propertyValue = comobj.UTC;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>This property gets the UTC time formatted as a date time string.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ClearMeasurementTime</Name>
               <Location>PtpTime</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearMeasurementTime(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Ptp;
comobj = comobj.Time;
feature('COM_SafeArraySingleDim',1);
comobj.ClearMeasurementTime();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method clear the beginning and ending timestamps for the last measurement.</Description>
            </Method>
            <Method>
               <Name>FetchCurrentTime</Name>
               <Location>PtpTime</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [TimeSeconds, TimeFraction] = FetchCurrentTime(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Ptp;
comobj = comobj.Time;
feature('COM_SafeArraySingleDim',1);
[TimeSeconds, TimeFraction] = comobj.FetchCurrentTime(0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method returns the Seconds and fractional seconds part of the current PTP time.</Description>
            </Method>
            <Method>
               <Name>GetMeasurementTime</Name>
               <Location>PtpTime</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [DeltaSeconds, BeginSeconds, BeginFraction, EndSeconds, EndFraction] = GetMeasurementTime(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Ptp;
comobj = comobj.Time;
feature('COM_SafeArraySingleDim',1);
[DeltaSeconds, BeginSeconds, BeginFraction, EndSeconds, EndFraction] = comobj.GetMeasurementTime(0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method returns the elapsed time and the beginning and ending timestamps for the last completed measurement.</Description>
            </Method>
            <Method>
               <Name>SetCurrentTime</Name>
               <Location>PtpTime</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetCurrentTime(obj, TimeSeconds, TimeFraction)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Ptp;
comobj = comobj.Time;
feature('COM_SafeArraySingleDim',1);
comobj.SetCurrentTime(double(TimeSeconds), double(TimeFraction));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method sets the current PTP time expressed in LXI time units of seconds and fractional seconds.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>PtpTimeMarker</Name>
         <Description>AgilentRfSigGen Ptp Time Marker interface, contains methods to handle the Time Marker of PTP Time.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="PtpTimeMarker1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>ClearMarker</Name>
               <Location>PtpTimeMarker</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearMarker(obj, Marker)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Ptp;
comobj = comobj.Time;
comobj = comobj.Marker;
feature('COM_SafeArraySingleDim',1);
comobj.ClearMarker(int32(Marker));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method clears the time marker.</Description>
            </Method>
            <Method>
               <Name>GetMarkerTime</Name>
               <Location>PtpTimeMarker</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [DeltaSeconds, MarkerSeconds, MarkerFraction, CurrentSeconds, CurrentFraction] = GetMarkerTime(obj, Marker, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Ptp;
comobj = comobj.Time;
comobj = comobj.Marker;
feature('COM_SafeArraySingleDim',1);
[DeltaSeconds, MarkerSeconds, MarkerFraction, CurrentSeconds, CurrentFraction] = comobj.GetMarkerTime(int32(Marker), 0, 0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method returns and calculates the delta or elapsed time from the time marker to the current PTP time.</Description>
            </Method>
            <Method>
               <Name>SetMarker</Name>
               <Location>PtpTimeMarker</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetMarker(obj, Marker)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Ptp;
comobj = comobj.Time;
comobj = comobj.Marker;
feature('COM_SafeArraySingleDim',1);
comobj.SetMarker(int32(Marker));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This method sets the time marker with the PTP time so that that it can later be measured against the current PTP time.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>PulseGenerator</Name>
         <Description>AgilentRfSigGen pulse generator interface. It consists of properties and methods to confgure a pulse generator that is generarlly used as a pulse modulation source.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="PulseGenerator1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ExternalTriggerDelay</Name>
               <Location>PulseGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	propertyValue = comobj.ExternalTriggerDelay;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	comobj.ExternalTriggerDelay = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the delay from trigger input to start of the output pulse.</Description>
            </Property>
            <Property>
               <Name>ExternalTriggerSlope</Name>
               <Location>PulseGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	propertyValue = comobj.ExternalTriggerSlope;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	comobj.ExternalTriggerSlope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenPulseExternalTriggerSlopePositive" Value="AgilentRfSigGenPulseExternalTriggerSlopePositive"/>
                     <Enum Name="AgilentRfSigGenPulseExternalTriggerSlopeNegative" Value="AgilentRfSigGenPulseExternalTriggerSlopeNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the trigger event occurs on the rising or falling edge of the input signal.</Description>
            </Property>
            <Property>
               <Name>GatingEnabled</Name>
               <Location>PulseGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	propertyValue = comobj.GatingEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	comobj.GatingEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Turns pulse gating on/off.</Description>
            </Property>
            <Property>
               <Name>InternalTriggerPeriod</Name>
               <Location>PulseGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	propertyValue = comobj.InternalTriggerPeriod;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	comobj.InternalTriggerPeriod = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the period of the pulse generator's output signal.</Description>
            </Property>
            <Property>
               <Name>TriggerSource</Name>
               <Location>PulseGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	propertyValue = comobj.TriggerSource;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	comobj.TriggerSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenPulseTriggerSourceInternal" Value="AgilentRfSigGenPulseTriggerSourceInternal"/>
                     <Enum Name="AgilentRfSigGenPulseTriggerSourceExternal" Value="AgilentRfSigGenPulseTriggerSourceExternal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source of the signal the pulse generator uses to generate one pulse.</Description>
            </Property>
            <Property>
               <Name>Width</Name>
               <Location>PulseGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	propertyValue = comobj.Width;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	comobj.Width = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the width of the output pulse.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>PulseGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, TriggerSource, PulseWidth, GatingEnabled)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.PulseGenerator;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(TriggerSource, double(PulseWidth), logical(GatingEnabled));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the pulse generator within the RF signal generator.</Description>
            </Method>
            <Method>
               <Name>ConfigureExternalTrigger</Name>
               <Location>PulseGenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureExternalTrigger(obj, Slope, Delay)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.PulseGenerator;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureExternalTrigger(Slope, double(Delay));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the external trigger for the pulse generator.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>PulseGeneratorDouble</Name>
         <Description>AgilentRfSigGen pulse generator double interface. Its properties and methods control whether how a double pulse is generated.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="PulseGeneratorDouble1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Delay</Name>
               <Location>PulseGeneratorDouble</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	comobj = comobj.Double;
	propertyValue = comobj.Delay;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	comobj = comobj.Double;
	comobj.Delay = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the delay of the second pulse.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>PulseGeneratorDouble</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	comobj = comobj.Double;
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	comobj = comobj.Double;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Turns double pulse mode on/off.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>PulseGeneratorDouble</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Enabled, Delay)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.PulseGenerator;
comobj = comobj.Double;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(logical(Enabled), double(Delay));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the double pulse state and delay.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>PulseGeneratorOutput</Name>
         <Description>AgilentRfSigGen pulse generator output interface. Its properties and methods control the amplitude and enabling of the output from the generator.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="PulseGeneratorOutput1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>PulseGeneratorOutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	comobj = comobj.Output;
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	comobj = comobj.Output;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Turns the pulse generator on/off.</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>PulseGeneratorOutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	comobj = comobj.Output;
	propertyValue = comobj.Polarity;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseGenerator;
	comobj = comobj.Output;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenPulseOutputPolarityNormal" Value="AgilentRfSigGenPulseOutputPolarityNormal"/>
                     <Enum Name="AgilentRfSigGenPulseOutputPolarityInverted" Value="AgilentRfSigGenPulseOutputPolarityInverted"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the polarity of the output signal.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>PulseGeneratorOutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Polarity, Enabled)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.PulseGenerator;
comobj = comobj.Output;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Polarity, logical(Enabled));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the output and polarity of the pulse generator.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>PulseModulation</Name>
         <Description>AgilentRfSigGen pulse modulation interface. It consists of properties which control how the carrier is pulse modulated.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="PulseModulation1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>PulseModulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseModulation;
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseModulation;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the signal generator applies pulse modulation to the RF output signal.</Description>
            </Property>
            <Property>
               <Name>ExternalPolarity</Name>
               <Location>PulseModulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseModulation;
	propertyValue = comobj.ExternalPolarity;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseModulation;
	comobj.ExternalPolarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenPulseModulationExternalPolarityNormal" Value="AgilentRfSigGenPulseModulationExternalPolarityNormal"/>
                     <Enum Name="AgilentRfSigGenPulseModulationExternalPolarityInverse" Value="AgilentRfSigGenPulseModulationExternalPolarityInverse"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the polarity of the external source signal.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>PulseModulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseModulation;
	propertyValue = comobj.Source;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PulseModulation;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenPulseModulationSourceInternal" Value="AgilentRfSigGenPulseModulationSourceInternal"/>
                     <Enum Name="AgilentRfSigGenPulseModulationSourceExternal" Value="AgilentRfSigGenPulseModulationSourceExternal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the source of the signal that is used as the modulating signal.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>ReferenceOscillator</Name>
         <Description>AgilentRfSigGen reference oscillator interface. Its properties and methods control what signal is used for a frequency reference.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ReferenceOscillator1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ExternalFrequency</Name>
               <Location>ReferenceOscillator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceOscillator;
	propertyValue = comobj.ExternalFrequency;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceOscillator;
	comobj.ExternalFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the frequency of the external signal, which is used as reference for internal RF frequency generation. The only legal value is 10 MHz.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>ReferenceOscillator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceOscillator;
	propertyValue = comobj.Source;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceOscillator;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenReferenceOscillatorSourceInternal" Value="AgilentRfSigGenReferenceOscillatorSourceInternal"/>
                     <Enum Name="AgilentRfSigGenReferenceOscillatorSourceExternal" Value="AgilentRfSigGenReferenceOscillatorSourceExternal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the reference oscillator source.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>ReferenceOscillator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, Frequency)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ReferenceOscillator;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, double(Frequency));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the signal generator's reference oscillator. The value of Frequency must always be 10 MHz.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>RF</Name>
         <Description>AgilentRfSigGen RF interface. It contains properties and methods to control the basic characteristics, frequency and power, of the signal.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="RF1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Frequency</Name>
               <Location>RF</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.RF;
	propertyValue = comobj.Frequency;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.RF;
	comobj.Frequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the frequency of the generated RF output signal.</Description>
            </Property>
            <Property>
               <Name>Level</Name>
               <Location>RF</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.RF;
	propertyValue = comobj.Level;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.RF;
	comobj.Level = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the amplitude (power/level) of the RF output signal.</Description>
            </Property>
            <Property>
               <Name>OutputEnabled</Name>
               <Location>RF</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.RF;
	propertyValue = comobj.OutputEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.RF;
	comobj.OutputEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Turns the RF output signal on/off.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>RF</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Frequency, PowerLevel)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.RF;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Frequency), double(PowerLevel));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the frequency and the power/level of the RF output signal.</Description>
            </Method>
            <Method>
               <Name>DisableAllModulation</Name>
               <Location>RF</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DisableAllModulation(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.RF;
feature('COM_SafeArraySingleDim',1);
comobj.DisableAllModulation();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function disables all currently enabled modulations.</Description>
            </Method>
            <Method>
               <Name>IsSettled</Name>
               <Location>RF</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = IsSettled(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.RF;
feature('COM_SafeArraySingleDim',1);
[val] = comobj.IsSettled();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function queries the state of the RF output signal.</Description>
            </Method>
            <Method>
               <Name>WaitUntilSettled</Name>
               <Location>RF</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WaitUntilSettled(obj, MaxTimeMilliseconds)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.RF;
feature('COM_SafeArraySingleDim',1);
comobj.WaitUntilSettled(int32(MaxTimeMilliseconds));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function returns if the state of the RF output signal has settled.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Sweep</Name>
         <Description>AgilentRfSigGen sweep interface. It contains pointers to interfaces which control forms of sweeping such as frequency or power. It aslo contains properties which apply to all forms of sweeping.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Sweep1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Mode</Name>
               <Location>Sweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	propertyValue = comobj.Mode;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenSweepModeNone" Value="AgilentRfSigGenSweepModeNone"/>
                     <Enum Name="AgilentRfSigGenSweepModeFrequencySweep" Value="AgilentRfSigGenSweepModeFrequencySweep"/>
                     <Enum Name="AgilentRfSigGenSweepModePowerSweep" Value="AgilentRfSigGenSweepModePowerSweep"/>
                     <Enum Name="AgilentRfSigGenSweepModeFrequencyStep" Value="AgilentRfSigGenSweepModeFrequencyStep"/>
                     <Enum Name="AgilentRfSigGenSweepModePowerStep" Value="AgilentRfSigGenSweepModePowerStep"/>
                     <Enum Name="AgilentRfSigGenSweepModeList" Value="AgilentRfSigGenSweepModeList"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies whether the RF output signal is a continuous wave or the frequency, the power level or both are swept or stepped.</Description>
            </Property>
            <Property>
               <Name>TriggerSource</Name>
               <Location>Sweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	propertyValue = comobj.TriggerSource;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj.TriggerSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceImmediate" Value="AgilentRfSigGenSweepTriggerSourceImmediate"/>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceExternal" Value="AgilentRfSigGenSweepTriggerSourceExternal"/>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceSoftware" Value="AgilentRfSigGenSweepTriggerSourceSoftware"/>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceKey" Value="AgilentRfSigGenSweepTriggerSourceKey"/>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceLan" Value="AgilentRfSigGenSweepTriggerSourceLan"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the way to start the sweep or run the sweep continuously.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Sweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Mode, TriggerSource)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Mode, TriggerSource);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the signal generator whether the RF output signal is a continuous wave or the frequency, the power level or both are swept or stepped.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>SweepFrequencyStep</Name>
         <Description>AgilentRfSigGen frequency step interface. It contains properties and methods for the stepping form of frequency sweep.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SweepFrequencyStep1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Dwell</Name>
               <Location>SweepFrequencyStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencyStep;
	propertyValue = comobj.Dwell;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencyStep;
	comobj.Dwell = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the duration of one step.</Description>
            </Property>
            <Property>
               <Name>Points</Name>
               <Location>SweepFrequencyStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencyStep;
	propertyValue = comobj.Points;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencyStep;
	comobj.Points = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Defines the number of points in the step sweep.</Description>
            </Property>
            <Property>
               <Name>Scaling</Name>
               <Location>SweepFrequencyStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencyStep;
	propertyValue = comobj.Scaling;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencyStep;
	comobj.Scaling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenFrequencyStepScaleLinear" Value="AgilentRfSigGenFrequencyStepScaleLinear"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the spacing of the steps.</Description>
            </Property>
            <Property>
               <Name>SingleStepEnabled</Name>
               <Location>SweepFrequencyStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencyStep;
	propertyValue = comobj.SingleStepEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Whether single stepping is enabled.</Description>
            </Property>
            <Property>
               <Name>SingleStepSource</Name>
               <Location>SweepFrequencyStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencyStep;
	propertyValue = comobj.SingleStepSource;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencyStep;
	comobj.SingleStepSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceImmediate" Value="AgilentRfSigGenSweepTriggerSourceImmediate"/>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceExternal" Value="AgilentRfSigGenSweepTriggerSourceExternal"/>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceSoftware" Value="AgilentRfSigGenSweepTriggerSourceSoftware"/>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceKey" Value="AgilentRfSigGenSweepTriggerSourceKey"/>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceLan" Value="AgilentRfSigGenSweepTriggerSourceLan"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies which trigger source source is used to step frequency.</Description>
            </Property>
            <Property>
               <Name>Size</Name>
               <Location>SweepFrequencyStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencyStep;
	propertyValue = comobj.Size;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencyStep;
	comobj.Size = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the step size.</Description>
            </Property>
            <Property>
               <Name>Start</Name>
               <Location>SweepFrequencyStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencyStep;
	propertyValue = comobj.Start;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencyStep;
	comobj.Start = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the start frequency of the stepped sweep.</Description>
            </Property>
            <Property>
               <Name>Stop</Name>
               <Location>SweepFrequencyStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencyStep;
	propertyValue = comobj.Stop;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencyStep;
	comobj.Stop = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the stop frequency of the stepped sweep.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ConfigureDwell</Name>
               <Location>SweepFrequencyStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureDwell(obj, SingleStepSource, Dwell)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.FrequencyStep;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureDwell(SingleStepSource, double(Dwell));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the attributes that control the stepping.</Description>
            </Method>
            <Method>
               <Name>ConfigureStartStop</Name>
               <Location>SweepFrequencyStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureStartStop(obj, Start, Stop, Scaling, StepSize)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.FrequencyStep;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureStartStop(double(Start), double(Stop), Scaling, double(StepSize));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the attributes that control the step frequencies of the generator's RF output signal. The only valid setting for scaling is linear.</Description>
            </Method>
            <Method>
               <Name>Reset</Name>
               <Location>SweepFrequencyStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.FrequencyStep;
feature('COM_SafeArraySingleDim',1);
comobj.Reset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function resets the stepping if single step is enabled.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>SweepFrequencySweep</Name>
         <Description>AgilentRfSigGen frequency sweep interface. It contains properties and methods for smooth changes in frequency.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SweepFrequencySweep1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Start</Name>
               <Location>SweepFrequencySweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencySweep;
	propertyValue = comobj.Start;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencySweep;
	comobj.Start = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the start frequency of the step sweep.</Description>
            </Property>
            <Property>
               <Name>Stop</Name>
               <Location>SweepFrequencySweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencySweep;
	propertyValue = comobj.Stop;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencySweep;
	comobj.Stop = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the stop frequency of the step sweep.</Description>
            </Property>
            <Property>
               <Name>Time</Name>
               <Location>SweepFrequencySweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencySweep;
	propertyValue = comobj.Time;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.FrequencySweep;
	comobj.Time = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the duration of one sweep from start to stop frequency.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ConfigureCenterSpan</Name>
               <Location>SweepFrequencySweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureCenterSpan(obj, Center, Span)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.FrequencySweep;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureCenterSpan(double(Center), double(Span));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the center frequency and the frequency span for the step sweep.</Description>
            </Method>
            <Method>
               <Name>ConfigureStartStop</Name>
               <Location>SweepFrequencySweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureStartStop(obj, Start, Stop)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.FrequencySweep;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureStartStop(double(Start), double(Stop));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the start and the stop frequency for the step sweep.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>SweepList</Name>
         <Description>AgilentRfSigGen sweep list interface. It consists of properties and methods which allow the freqeuncy and/or power to hop from arbitrary value to arbitrary value.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SweepList1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Dwell</Name>
               <Location>SweepList</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.List;
	propertyValue = comobj.Dwell;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.List;
	comobj.Dwell = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the duration of one step.</Description>
            </Property>
            <Property>
               <Name>SelectedName</Name>
               <Location>SweepList</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.List;
	propertyValue = comobj.SelectedName;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.List;
	comobj.SelectedName = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the name of the selected list to become active.</Description>
            </Property>
            <Property>
               <Name>SingleStepEnabled</Name>
               <Location>SweepList</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.List;
	propertyValue = comobj.SingleStepEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Turns single step on/off.</Description>
            </Property>
            <Property>
               <Name>SingleStepSource</Name>
               <Location>SweepList</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.List;
	propertyValue = comobj.SingleStepSource;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.List;
	comobj.SingleStepSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceImmediate" Value="AgilentRfSigGenSweepTriggerSourceImmediate"/>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceExternal" Value="AgilentRfSigGenSweepTriggerSourceExternal"/>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceSoftware" Value="AgilentRfSigGenSweepTriggerSourceSoftware"/>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceKey" Value="AgilentRfSigGenSweepTriggerSourceKey"/>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceLan" Value="AgilentRfSigGenSweepTriggerSourceLan"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies which trigger source source is used to step through the list</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ClearAll</Name>
               <Location>SweepList</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearAll(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.List;
feature('COM_SafeArraySingleDim',1);
comobj.ClearAll();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function deletes one list from the pool of available lists.</Description>
            </Method>
            <Method>
               <Name>ConfigureDwell</Name>
               <Location>SweepList</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureDwell(obj, SingleStepSource, Dwell)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.List;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureDwell(SingleStepSource, double(Dwell));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the attributes that control the stepping.</Description>
            </Method>
            <Method>
               <Name>CreateFrequency</Name>
               <Location>SweepList</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Frequency] = CreateFrequency(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.List;
feature('COM_SafeArraySingleDim',1);
[Frequency] = comobj.CreateFrequency(Name, [0;0]);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function creates a named list of frequency values.</Description>
            </Method>
            <Method>
               <Name>CreateFrequencyPower</Name>
               <Location>SweepList</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Frequency, Power] = CreateFrequencyPower(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.List;
feature('COM_SafeArraySingleDim',1);
[Frequency, Power] = comobj.CreateFrequencyPower(Name, [0;0], [0;0]);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function creates a named list of frequency and power value pairs.</Description>
            </Method>
            <Method>
               <Name>CreatePower</Name>
               <Location>SweepList</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Power] = CreatePower(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.List;
feature('COM_SafeArraySingleDim',1);
[Power] = comobj.CreatePower(Name, [0;0]);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function creates a named list of power values.</Description>
            </Method>
            <Method>
               <Name>Reset</Name>
               <Location>SweepList</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.List;
feature('COM_SafeArraySingleDim',1);
comobj.Reset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function resets the stepping if single step is enabled.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>SweepPowerStep</Name>
         <Description>AgilentRfSigGen power step interface. It contains properties and methods for the stepping form of power sweep.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SweepPowerStep1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Dwell</Name>
               <Location>SweepPowerStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerStep;
	propertyValue = comobj.Dwell;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerStep;
	comobj.Dwell = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the duration of one step.</Description>
            </Property>
            <Property>
               <Name>Points</Name>
               <Location>SweepPowerStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerStep;
	propertyValue = comobj.Points;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerStep;
	comobj.Points = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Defines the number of points in the step sweep.</Description>
            </Property>
            <Property>
               <Name>SingleStepEnabled</Name>
               <Location>SweepPowerStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerStep;
	propertyValue = comobj.SingleStepEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Turns single step on/off.</Description>
            </Property>
            <Property>
               <Name>SingleStepSource</Name>
               <Location>SweepPowerStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerStep;
	propertyValue = comobj.SingleStepSource;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerStep;
	comobj.SingleStepSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceImmediate" Value="AgilentRfSigGenSweepTriggerSourceImmediate"/>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceExternal" Value="AgilentRfSigGenSweepTriggerSourceExternal"/>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceSoftware" Value="AgilentRfSigGenSweepTriggerSourceSoftware"/>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceKey" Value="AgilentRfSigGenSweepTriggerSourceKey"/>
                     <Enum Name="AgilentRfSigGenSweepTriggerSourceLan" Value="AgilentRfSigGenSweepTriggerSourceLan"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies which trigger source source is used to step power</Description>
            </Property>
            <Property>
               <Name>Size</Name>
               <Location>SweepPowerStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerStep;
	propertyValue = comobj.Size;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerStep;
	comobj.Size = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the step size.</Description>
            </Property>
            <Property>
               <Name>Start</Name>
               <Location>SweepPowerStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerStep;
	propertyValue = comobj.Start;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerStep;
	comobj.Start = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the start power of the stepped sweep.</Description>
            </Property>
            <Property>
               <Name>Stop</Name>
               <Location>SweepPowerStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerStep;
	propertyValue = comobj.Stop;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerStep;
	comobj.Stop = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the stop power of the stepped sweep.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ConfigureDwell</Name>
               <Location>SweepPowerStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureDwell(obj, SingleStepSource, Dwell)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.PowerStep;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureDwell(SingleStepSource, double(Dwell));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the attributes that control the stepping.</Description>
            </Method>
            <Method>
               <Name>ConfigureStartStop</Name>
               <Location>SweepPowerStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureStartStop(obj, Start, Stop, StepSize)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.PowerStep;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureStartStop(double(Start), double(Stop), double(StepSize));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the attributes that control the power steps of the generator's RF output signal.</Description>
            </Method>
            <Method>
               <Name>Reset</Name>
               <Location>SweepPowerStep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.PowerStep;
feature('COM_SafeArraySingleDim',1);
comobj.Reset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function resets the stepping if single step is enabled.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>SweepPowerSweep</Name>
         <Description>AgilentRfSigGen power sweep interface.  It contains properties and methods for smooth changes in power.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SweepPowerSweep1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Start</Name>
               <Location>SweepPowerSweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerSweep;
	propertyValue = comobj.Start;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerSweep;
	comobj.Start = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the start power of the sweep.</Description>
            </Property>
            <Property>
               <Name>Stop</Name>
               <Location>SweepPowerSweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerSweep;
	propertyValue = comobj.Stop;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerSweep;
	comobj.Stop = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the stop power of the sweep.</Description>
            </Property>
            <Property>
               <Name>Time</Name>
               <Location>SweepPowerSweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerSweep;
	propertyValue = comobj.Time;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.PowerSweep;
	comobj.Time = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the duration of one sweep from start to stop power.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ConfigureStartStop</Name>
               <Location>SweepPowerSweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureStartStop(obj, Start, Stop)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.PowerSweep;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureStartStop(double(Start), double(Stop));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the start and the stop power for the sweep.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>System2</Name>
         <Description>AgilentRfSigGen system interface. It consists of properties and methods which apply globally to the driver or instrument. An interface of this form is found in all Agilent IVI-COM drivers.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System21" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AsyncEventsEnabled</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.AsyncEventsEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj.AsyncEventsEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enable asynchronos events to event server.</Description>
            </Property>
            <Property>
               <Name>FwVersion</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.FwVersion;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the firmware version</Description>
            </Property>
            <Property>
               <Name>LxiDomain</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.LxiDomain;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj.LxiDomain = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>SerialNumber</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.SerialNumber;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Instrument serial number</Description>
            </Property>
            <Property>
               <Name>TimeoutMilliseconds</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.TimeoutMilliseconds;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj.TimeoutMilliseconds = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>I/O timeout value in milliseconds</Description>
            </Property>
            <Property>
               <Name>TraceEnabled</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	propertyValue = comobj.TraceEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj.TraceEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Driver tracing enabled</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>DisableLocalControls</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DisableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.DisableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Front panel disable</Description>
            </Method>
            <Method>
               <Name>EnableLocalControls</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function EnableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.EnableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Front panel enable</Description>
            </Method>
            <Method>
               <Name>RecallState</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function RecallState(obj, Identifier)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.RecallState(Identifier);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Recall an instrument state from internal memory</Description>
            </Method>
            <Method>
               <Name>SaveState</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SaveState(obj, Identifier)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.SaveState(Identifier);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Saves the current instrument state into internal memory</Description>
            </Method>
            <Method>
               <Name>WaitForOperationComplete</Name>
               <Location>System2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WaitForOperationComplete(obj, MaxTimeMilliseconds)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
feature('COM_SafeArraySingleDim',1);
comobj.WaitForOperationComplete(int32(MaxTimeMilliseconds));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Method returns when all pending operations are complete or MaxTimeMilliseconds exceeded.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>System2IO</Name>
         <Description>IEEE 488.2 Formatted I/O Interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System2IO1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>InstrumentBigEndian</Name>
               <Location>System2IO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj = comobj.IO;
	propertyValue = comobj.InstrumentBigEndian;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj = comobj.IO;
	comobj.InstrumentBigEndian = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set whether the instrument communicates in Big Endian (IEEE 488.2) format</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>FlushRead</Name>
               <Location>System2IO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function FlushRead(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.FlushRead();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Flush the Read Buffer</Description>
            </Method>
            <Method>
               <Name>FlushWrite</Name>
               <Location>System2IO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function FlushWrite(obj, sendEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.FlushWrite(logical(sendEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Flush the Write Buffer and optionally send the END signal</Description>
            </Method>
            <Method>
               <Name>ReadIEEEBlock</Name>
               <Location>System2IO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData] = ReadIEEEBlock(obj, type, seekToBlock, flushToEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pData] = comobj.ReadIEEEBlock(type, logical(seekToBlock), logical(flushToEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read a definite-length IEEE block from the I/O Stream and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>ReadList</Name>
               <Location>System2IO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData] = ReadList(obj, type, listSeperator)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pData] = comobj.ReadList(type, listSeperator);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read a list of values in ASCII format from the I/O Stream, convert them to the specified type, and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>ReadNumber</Name>
               <Location>System2IO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData] = ReadNumber(obj, type, flushToEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pData] = comobj.ReadNumber(type, logical(flushToEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read a single number from the I/O Stream and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>ReadString</Name>
               <Location>System2IO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData] = ReadString(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pData] = comobj.ReadString();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read the entire contents of the buffer until the termination character / END signal and return the data as a string</Description>
            </Method>
            <Method>
               <Name>SetBufferSize</Name>
               <Location>System2IO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetBufferSize(obj, mask, size)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.SetBufferSize(mask, int32(size));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the formatted I/O read or write buffer size</Description>
            </Method>
            <Method>
               <Name>WriteIEEEBlock</Name>
               <Location>System2IO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteIEEEBlock(obj, Command, data, flushAndEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.WriteIEEEBlock(Command, logical(flushAndEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a command followed by an IEEE 488.2 definite-length binary block terminated with the Stream's termination character to the I/O Stream</Description>
            </Method>
            <Method>
               <Name>WriteList</Name>
               <Location>System2IO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteList(obj, data, type, listSeperator, flushAndEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.WriteList(type, listSeperator, logical(flushAndEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a list of values to the I/O Stream and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>WriteNumber</Name>
               <Location>System2IO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteNumber(obj, data, type, flushAndEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.WriteNumber(type, logical(flushAndEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a single number to the I/O Stream and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>WriteString</Name>
               <Location>System2IO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteString(obj, data, flushAndEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.WriteString(data, logical(flushAndEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a string to the I/O Stream and optionally flush the buffer</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>System2IOIO</Name>
         <Description>Message Based Interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System2IOIO1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>IOProtocol</Name>
               <Location>System2IOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.IOProtocol;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj = comobj.IO;
	comobj = comobj.IO;
	comobj.IOProtocol = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="PROT_NORMAL" Value="PROT_NORMAL"/>
                     <Enum Name="PROT_FDC" Value="PROT_FDC"/>
                     <Enum Name="PROT_HS488" Value="PROT_HS488"/>
                     <Enum Name="PROT_4882_STRS" Value="PROT_4882_STRS"/>
                     <Enum Name="PROT_USBTMC_VENDOR" Value="PROT_USBTMC_VENDOR"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set which I/O protocol to use</Description>
            </Property>
            <Property>
               <Name>SendEndEnabled</Name>
               <Location>System2IOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.SendEndEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj = comobj.IO;
	comobj = comobj.IO;
	comobj.SendEndEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set whether to assert END on Write</Description>
            </Property>
            <Property>
               <Name>TerminationCharacter</Name>
               <Location>System2IOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.TerminationCharacter;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj = comobj.IO;
	comobj = comobj.IO;
	comobj.TerminationCharacter = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set the termination character</Description>
            </Property>
            <Property>
               <Name>TerminationCharacterEnabled</Name>
               <Location>System2IOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.TerminationCharacterEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System2;
	comobj = comobj.IO;
	comobj = comobj.IO;
	comobj.TerminationCharacterEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set whether to use the termination character on Read</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>AssertTrigger</Name>
               <Location>System2IOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AssertTrigger(obj, protocol)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.AssertTrigger(protocol);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Assert a trigger</Description>
            </Method>
            <Method>
               <Name>Clear</Name>
               <Location>System2IOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.Clear();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clear the device</Description>
            </Method>
            <Method>
               <Name>Read</Name>
               <Location>System2IOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pBuffer] = Read(obj, count)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pBuffer] = comobj.Read(int32(count));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read the specified number of bytes</Description>
            </Method>
            <Method>
               <Name>ReadSTB</Name>
               <Location>System2IOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pStatusByte] = ReadSTB(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pStatusByte] = comobj.ReadSTB();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read the status byte</Description>
            </Method>
            <Method>
               <Name>ReadString</Name>
               <Location>System2IOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pBuffer] = ReadString(obj, count)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pBuffer] = comobj.ReadString(int32(count));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read the specified number of bytes as a string</Description>
            </Method>
            <Method>
               <Name>Write</Name>
               <Location>System2IOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pRetCount] = Write(obj, buffer, count)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pRetCount] = comobj.Write(buffer, int32(count));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write the specified data</Description>
            </Method>
            <Method>
               <Name>WriteString</Name>
               <Location>System2IOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pRetCount] = WriteString(obj, buffer)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System2;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pRetCount] = comobj.WriteString(buffer);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write the specified string</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Time</Name>
         <Description>LxiSync time interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Time1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>IsMaster</Name>
               <Location>Time</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Time;
	propertyValue = comobj.IsMaster;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Indicates if this device is the 1588 master.</Description>
            </Property>
            <Property>
               <Name>IsSynchronized</Name>
               <Location>Time</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Time;
	propertyValue = comobj.IsSynchronized;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Indicates if the device is synchronized.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>GetSystemTime</Name>
               <Location>Time</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [TimeSeconds, TimeFractional] = GetSystemTime(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Time;
feature('COM_SafeArraySingleDim',1);
[TimeSeconds, TimeFractional] = comobj.GetSystemTime(0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function retrieves the current 1588 time.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Trigger</Name>
         <Description>LxiSync trigger interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>TriggerCount</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.TriggerCount;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.TriggerCount = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the number of times a trigger has to occur to complete a measurement; that is, the number of triggers that are accepted before the measurement must be armed again.</Description>
            </Property>
            <Property>
               <Name>TriggerSource</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.TriggerSource;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.TriggerSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies which of the available trigger sources to use as the signal for triggering the device-specific operation (for example, a measurement).</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggerAlarm</Name>
         <Description>LxiSync repeated capability interface containing methods and properties that apply to all trigger alarms defined for the device.  A particular trigger alarm can be accessed using the Item property.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerAlarm1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>TriggerAlarm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the trigger alarm.</Description>
            </Property>
            <Property>
               <Name>Period</Name>
               <Location>TriggerAlarm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Period;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Period = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the period of the trigger alarm in seconds; that is, the amount of time in seconds that transpire before the alarm repeats.</Description>
            </Property>
            <Property>
               <Name>RepeatCount</Name>
               <Location>TriggerAlarm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.RepeatCount;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.RepeatCount = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the number of times to repeat the trigger at the period specified by the Trigger Alarm Period attribute.</Description>
            </Property>
            <Property>
               <Name>TimeFraction</Name>
               <Location>TriggerAlarm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.TimeFraction;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.TimeFraction = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the fractional seconds portion of the time at which the alarm will go off.</Description>
            </Property>
            <Property>
               <Name>TimeSeconds</Name>
               <Location>TriggerAlarm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.TimeSeconds;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Alarms;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.TimeSeconds = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the seconds portion of the time at which the alarm will go off.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>TriggerAlarm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, TimeSeconds, TimeFraction, Period, RepeatCount)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Alarms;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(TimeSeconds), double(TimeFraction), double(Period), int32(RepeatCount));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the most commonly configured attributes of the trigger alarm sub-system.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>TriggerAlarms</Name>
         <Description>LxiSync repeated capability interface containing methods and properties that apply to all trigger alarms defined for the device.  A particular trigger alarm can be accessed using the Item property.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerAlarms1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>TriggerAlarms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Alarms;
	propertyValue = comobj.Count;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the number of currently available trigger alarms</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Add</Name>
               <Location>TriggerAlarms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Add(obj, AlarmName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Alarms;
feature('COM_SafeArraySingleDim',1);
comobj.Add(AlarmName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function creates a new trigger alarm</Description>
            </Method>
            <Method>
               <Name>DisableAll</Name>
               <Location>TriggerAlarms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DisableAll(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Alarms;
feature('COM_SafeArraySingleDim',1);
comobj.DisableAll();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function disables all trigger alarms.</Description>
            </Method>
            <Method>
               <Name>Item</Name>
               <Location>TriggerAlarms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Alarms;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>An interface reference pointer to the IIviLxiSyncTriggerAlarm interface which is selected by the alarm name.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>TriggerAlarms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Alarms;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>Returns the physical repeated capability identifier defined by the specific driver for the trigger alarm that corresponds to the one-based index that the user specifies</Description>
            </Method>
            <Method>
               <Name>Remove</Name>
               <Location>TriggerAlarms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Remove(obj, AlarmName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Alarms;
feature('COM_SafeArraySingleDim',1);
comobj.Remove(AlarmName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function removes a trigger alarm.</Description>
            </Method>
            <Method>
               <Name>RemoveAllTriggerAlarms</Name>
               <Location>TriggerAlarms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function RemoveAllTriggerAlarms(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Alarms;
feature('COM_SafeArraySingleDim',1);
comobj.RemoveAllTriggerAlarms();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function removes all of the trigger alarms that were added using the AddTrigger /// Alarm function.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>TriggerSource</Name>
         <Description>LxiSync repeated capability interface containing methods and properties that apply to all trigger sources defined for the device.  A particular trigger source can be accessed using the Item property.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerSource1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Delay</Name>
               <Location>TriggerSource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Delay;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Delay = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the trigger source delay from when the trigger logic is satisfied until the device specific action (for instance a measurement) is triggered.</Description>
            </Property>
            <Property>
               <Name>Detection</Name>
               <Location>TriggerSource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Detection;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Detection = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="AgilentRfSigGenTriggerSourceDetectionRise" Value="AgilentRfSigGenTriggerSourceDetectionRise"/>
                     <Enum Name="AgilentRfSigGenTriggerSourceDetectionFall" Value="AgilentRfSigGenTriggerSourceDetectionFall"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the slope of the trigger source.</Description>
            </Property>
            <Property>
               <Name>EventId</Name>
               <Location>TriggerSource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.EventId;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.EventId = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the LAN event identifier that is associated with this trigger source.</Description>
            </Property>
            <Property>
               <Name>Filter</Name>
               <Location>TriggerSource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Filter;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Filter = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies a filter for restricting trigger sources.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>TriggerSource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Delay, Detection)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Sources;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Delay), Detection);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function configures the most commonly configured attributes of the trigger source sub-system.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>TriggerSources</Name>
         <Description>LxiSync repeated capability interface containing methods and properties that apply to all trigger sources defined for the device.  A particular trigger source can be accessed using the Item property.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerSources1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>TriggerSources</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Sources;
	propertyValue = comobj.Count;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The number of sources.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Add</Name>
               <Location>TriggerSources</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Add(obj, SourceName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Sources;
feature('COM_SafeArraySingleDim',1);
comobj.Add(SourceName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function creates a new trigger source.</Description>
            </Method>
            <Method>
               <Name>Item</Name>
               <Location>TriggerSources</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Sources;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>An interface reference pointer to the IIviLxiSyncTriggerSource interface which is selected by the source name.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>TriggerSources</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Sources;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>The source name for a given index.</Description>
            </Method>
            <Method>
               <Name>Remove</Name>
               <Location>TriggerSources</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Remove(obj, SourceName)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Sources;
feature('COM_SafeArraySingleDim',1);
comobj.Remove(SourceName);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function removes a trigger source.</Description>
            </Method>
            <Method>
               <Name>RemoveAllCustomTriggerSources</Name>
               <Location>TriggerSources</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function RemoveAllCustomTriggerSources(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Sources;
feature('COM_SafeArraySingleDim',1);
comobj.RemoveAllCustomTriggerSources();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>This function removes all of the custom trigger sources that were added using /// the Add Trigger Source function.</Description>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>