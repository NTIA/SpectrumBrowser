#!/bin/bash

### BEGIN INIT INFO
# Provides:              dbmonitoring
# Required-Start:        $all
# Required-Stop:         $all
# Default-Start:         2 3 4 5
# Default-Stop:          0 1 6
# Short-Description:     starts the dbmonitoring service
# Description:           starts dbmonitoring using start_daemon
# chkconfig: - 65 35
### END INIT INFO

RUN_AS="root"
RUN_AS_GROUP="root"
PID_PATH=/tmp/dbmonitoring.pid
LOG_PATH=/var/log/dbmonitoring.log

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/bin/dbmonitor
NAME=dbmonitor
DESC="db disk utilization monitor"

test -x $DAEMON || exit 0

if [[ -f /etc/default/${NAME} ]]; then
    source /etc/default/${NAME}
fi

source /lib/lsb/init-functions


start() {
    if _is_running; then
        echo "${NAME} already running"
    else
        _check_superuser

        if ! _mongod_running; then
            log_failure_msg "${NAME} requires mongod to be running"
            _print_usage_and_exit
        fi

        echo -n "Starting ${NAME}: "

        touch ${LOG_PATH}
        chown ${RUN_AS}:${RUN_AS_GROUP} ${LOG_PATH}
        chmod 660 ${LOG_PATH}

        start_daemon  ${DAEMON} -p ${PID_PATH} -l ${LOG_PATH} -u ${RUN_AS} -g ${RUN_AS_GROUP}

        if (( $? == 0 )) ; then
            log_success_msg
        else
            log_failure_msg
        fi
    fi
}

stop() {
    if _is_running; then
        _check_superuser

        echo -n "Stopping ${NAME}: "
        
        killproc  -p ${PID_PATH} ${DAEMON}  -SIGTERM
        if _is_running; then
            log_failure_msg
        else
            log_success_msg
        fi
    else
        echo "${NAME} already stopped"
    fi
}

status() {
    if _is_running; then
        _exit_with_msg "${NAME} (pid $(cat ${PID_PATH})) is running" $?
    else
        _exit_with_msg "${NAME} is stopped" $?
    fi
}

_exit_with_msg() {
    echo $1 # msg
    exit $2 # exit code
}

_print_usage_and_exit() {
    echo "Usage: service ${NAME} {start|stop|restart|status}" >> /dev/stderr
    exit 1
}

_is_running() {
    pidofproc -p ${PID_PATH} ${DAEMON} > /dev/null
    return $?
}


_mongod_running() {
    service mongod status > /dev/null 2>&1
    return $?
}

_check_superuser() {
    if (( ${EUID} != 0 )); then
        echo "${NAME} must be run with root priveleges" >> /dev/stderr
        _print_usage_and_exit
    fi
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        sleep 1
        start
        ;;
    status)
        status
        ;;
    *)
        _print_usage_and_exit
        ;;
esac

exit 0
